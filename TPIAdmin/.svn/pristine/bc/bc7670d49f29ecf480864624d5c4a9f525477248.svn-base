package com.abc.tpi.controller;

import java.net.URLDecoder;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.abc.tpi.common.exceptions.TpiRepositoryException;
import com.abc.tpi.model.Partner;
import com.abc.tpi.repository.ContactDetailRepository;
import com.abc.tpi.repository.PartnerRepository;
import com.abc.tpi.service.PartnerService;

@Controller
public class PartnerControllerRest {

	@Autowired
	private PartnerRepository partnerRepsitory;

	@Autowired
	private ContactDetailRepository contactDetailRepsitory;

	@Autowired
	PartnerService partnerService;

	// save partner
	@RequestMapping(value = { "/partners" }, method = { RequestMethod.POST })
	public ResponseEntity savePartner(HttpServletRequest request, HttpServletResponse response,
			@RequestBody Partner partner) {

		Logger logger = LogManager.getLogger(PartnerControllerRest.class);
		logger.debug("Invoked PartnerController.savePartner()");

		Partner result = null;
		try {
			result = partnerService.createPartner(partner);
			return ResponseEntity.status(HttpStatus.OK).body(result);
		} catch (TpiRepositoryException ex) {
			logger.error(ex);
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body(null);

		}
	}

	// get partner by ID
	@RequestMapping(value = { "/partners/{partnerID}" }, method = { RequestMethod.GET })
	public ResponseEntity<Partner> getPartner(@PathVariable("partnerID") int partnerID) {

		Logger logger = LogManager.getLogger(PartnerControllerRest.class);
		logger.debug("Invoked PartnerController.getPartner()");

		Partner result = null;
		try {
			result = partnerService.findPartnerById(partnerID);
			return ResponseEntity.status(HttpStatus.OK).body(result);
		} catch (Exception ex) {
			logger.error(ex);
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body(null);

		}
	}

	// get partner by name
	@RequestMapping(value = { "/partners" }, method = { RequestMethod.GET })
	public ResponseEntity<List<Partner>> findPartnersByName(HttpServletRequest request, HttpServletResponse response) {

		Logger logger = LogManager.getLogger(PartnerControllerRest.class);
		logger.debug("Invoked PartnerController.findPartnersByName()");

		String partnerName = null;
		if (request.getParameter("partnerName") != null) {
			try {
				partnerName = URLDecoder.decode(request.getParameter("partnerName"), "UTF-8");
			} catch (Exception ex) {
				logger.error("Invalid value passed for 'partnerName' request parameter");
				logger.error(ex);
				return ResponseEntity.status(HttpStatus.FORBIDDEN).body(null);
			}
		}
		
		List<Partner> result = null;

		if (partnerName != null) 
		{

			try {
				result = partnerService.findPartnersByNameContains(partnerName);
				for (Partner partner : result) {
					partner.getContactDetails().size();
				}
			} catch (Exception ex) {
				logger.error(ex);
				return ResponseEntity.status(HttpStatus.FORBIDDEN).body(null);
			}
		} 
		
		else 
		{
			
			try
			{
			result = partnerService.findAllPartners();
			for (Partner partner : result) 
			{
				partner.getContactDetails().size();
			}
			
			}
			catch (Exception ex)
			{
				logger.error(ex);
				return ResponseEntity.status(HttpStatus.FORBIDDEN).body(null);
			}
			
		}
		
		return ResponseEntity.status(HttpStatus.OK).body(result);
	}

	// find partner by exact name match (case insensitive)
	@RequestMapping(value = { "/partnerExists" }, method = { RequestMethod.GET })
	public ResponseEntity<String> findPartnerByName(HttpServletRequest request, HttpServletResponse response) {

		Logger logger = LogManager.getLogger(PartnerControllerRest.class);
		logger.debug("Invoked PartnerController.findPartnerByName()");

		String partnerName = null;
		try {
			partnerName = URLDecoder.decode(request.getParameter("partnerName"), "UTF-8");
		} catch (Exception ex) {
			logger.error("Invalid value passed for 'partnerName' request parameter");
			logger.error(ex);
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Partner Group Name is invalid");
		}

		String result = "false";

		if (partnerName != null) {

			try {
				boolean exists = partnerService.isPartnerExist(partnerName);
				if (exists) {
					result = "true";
				} else {
					result = "false";
				}
				return ResponseEntity.status(HttpStatus.OK).body(result);
			} catch (Exception ex) {
				logger.error(ex);
				return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Failed to retrieve Partners");
			}
		} else {
			logger.error("Invalid value passed for 'partnerName' request parameter");
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Name is invalid");
		}
	}

	@RequestMapping(value = { "/partners/{partnerID}" }, method = { RequestMethod.DELETE })
	public ResponseEntity deletePartnerByID(@PathVariable("partnerID") int partnerID) {

		Logger logger = LogManager.getLogger(PartnerControllerRest.class);
		logger.debug("Invoked PartnerController.deletePartner()");

		try 
			{
				int id = partnerID;
				partnerService.deletePartnerById(id);
				return new ResponseEntity(HttpStatus.NO_CONTENT);
			} 
				catch (Exception ex) {
				logger.error(ex);
				return new ResponseEntity(HttpStatus.FORBIDDEN);
			}
	}

}
