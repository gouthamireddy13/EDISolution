package com.abc.tpi.service.migrator;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;
import javax.transaction.Transactional.TxType;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.abc.tpi.model.migrator.BusinessServiceApprovalReview;
import com.abc.tpi.model.migrator.ChangeType;
import com.abc.tpi.model.migrator.ObjectTracker;
import com.abc.tpi.model.migrator.ServiceApprovalReview;
import com.abc.tpi.model.migrator.ServiceSubscriptionApprovalReview;
import com.abc.tpi.model.service.BusinessService;
import com.abc.tpi.model.service.ServiceSubscription;
import com.abc.tpi.repository.BusinessServiceRepository;
import com.abc.tpi.repository.ObjectTrackerRepository;
import com.abc.tpi.repository.ServiceRepository;
import com.abc.tpi.repository.ServiceSubscriptionRepository;
import com.abc.tpi.service.ServiceSubscriptionService;

@Service
public class MigratorDataServiceImpl implements MigratorDataService {

	@Autowired
	ServiceSubscriptionRepository serviceSubscriptionRepository;
	
	@Autowired
	ServiceRepository serviceRepository;
	
	@Autowired
	BusinessServiceRepository businessServiceRepository;
	
	@Autowired
	ServiceSubscriptionService serviceSubscriptionService;	

	@Autowired
	ObjectTrackerRepository objectTrackerRepository;
	
	@Override
	public List<ObjectTracker> getDataForSrId(String srId) {
		return getDataForSrIds(srId);		
	}
	
	/**
	 * Returns List of data structures that describe ServiceSubscription/Service/BusinessService objects that
	 * are candidates for migration based on SR ID and their migration history
	 */
	@Transactional(value=TxType.NOT_SUPPORTED)
	public List<ServiceSubscriptionApprovalReview> getApprovalReviewForSriId(String srId)
	{
		List<ServiceSubscriptionApprovalReview> result = new ArrayList<ServiceSubscriptionApprovalReview>();
		List<ObjectTracker> objectTrackers =  getDataForSrId(srId);
		
		
		for (ObjectTracker serviceSubscription: objectTrackers)
		{
			ServiceSubscriptionApprovalReview ssReview = new ServiceSubscriptionApprovalReview();
			ssReview.setDeleted(false);			
			
			ServiceSubscription ss = serviceSubscriptionService.findEntityUsingEntityGrpah(ServiceSubscription.class, serviceSubscription.getSourceId(), "ServiceSubscriptionEntity.graphPartnerServiceCat");
			
			ssReview.setName(ss.getPartner().getPartnerName() + "-" + ss.getServiceCategory().getName());
			ssReview.setObjectId(serviceSubscription.getSourceId());
			
			ssReview.setSrId("");
			
			ssReview.setToBeExported(true);
			
			if (serviceSubscription.getModificationStatus()!=null && serviceSubscription.getModificationStatus()==ChangeType.NA)
			{
				ssReview.setToBeExported(true);
			}
			
			ObjectTracker trackHistory = objectTrackerRepository.findOneByClassNameAndSourceId(ServiceSubscription.class.getName(), serviceSubscription.getSourceId());
			
			if (trackHistory==null)
			{
				ssReview.setNew(true);
			}
			
			if (serviceSubscription.getObjectTrackers()!=null)
			{
				for (ObjectTracker serviceTracker: serviceSubscription.getObjectTrackers())
				{
					ServiceApprovalReview serviceReview = new ServiceApprovalReview();
					serviceReview.setDeleted(false);
					serviceReview.setObjectId(serviceTracker.getSourceId());
					serviceReview.setSrId(srId);
				
					com.abc.tpi.model.service.Service srvc = serviceSubscriptionService.findEntityUsingEntityGrpah(com.abc.tpi.model.service.Service.class, serviceTracker.getSourceId(), "ServiceEntity.graphServiceId");			
				
					serviceReview.setName(srvc.getLightWellPartner().getProductionIsaID() + " - " + srvc.getLightWellPartner().getProductionGsId());
				
					serviceReview.setToBeExported(true);
				
					if (serviceTracker.getModificationStatus()!=null && serviceTracker.getModificationStatus()==ChangeType.NA)					
					{
						ssReview.setToBeExported(true);
					}
				
					trackHistory = objectTrackerRepository.findOneByClassNameAndSourceId(com.abc.tpi.model.service.Service.class.getName(), serviceTracker.getSourceId());
				
					if (trackHistory==null)
					{
						serviceReview.setNew(true);
					}
				
					for (ObjectTracker businessServiceTracker: serviceTracker.getObjectTrackers())
					{
						BusinessServiceApprovalReview businessServiceReview = new BusinessServiceApprovalReview();
						businessServiceReview.setDeleted(false);
						businessServiceReview.setObjectId(businessServiceTracker.getSourceId());
						businessServiceReview.setSrId(srId);
						BusinessService businessServiceEnt = serviceSubscriptionService.findEntityUsingEntityGrpah(com.abc.tpi.model.service.BusinessService.class,(long) businessServiceTracker.getSourceId(), "BusinessServiceEntity.graphServiceId");
						businessServiceReview.setName(businessServiceEnt.getServiceType().getBusinessServiceName());
						businessServiceReview.setToBeExported(true);
					
						if (businessServiceTracker.getModificationStatus()!=null && businessServiceTracker.getModificationStatus()==ChangeType.NA)					
						{
							businessServiceReview.setToBeExported(true);
						}
					
						trackHistory = objectTrackerRepository.findOneByClassNameAndSourceId(BusinessService.class.getName(), businessServiceTracker.getSourceId());
					
						if (trackHistory==null)
						{
							businessServiceReview.setNew(true);
						}
					
						serviceReview.addBussinessServiceReview(businessServiceReview);
					}
					ssReview.addServiceReview(serviceReview);
				}
				result.add(ssReview);
			}
		}
		
		return result;
	}

	/**
	 * Returns List of ObjectTracker objects containing migration history for selected Entities based on SR ID
	 * @param srId
	 * @return
	 */

	private List<ObjectTracker> getDataForSrIds(String srId)
	{
		//1. Get list of ServiceSubscriptions that need to be migrated;
		//2. Get list of Services that might need to be migrated
		//3. Get list of BusinessServices that might need to be migrated.
		//4. Determine if the object has EVER been migrated (Note: on the receiving side, migration will be validated first)
		//5. Put it all together in a structure.
		
		List<Long> serviceSubscriptionIds = serviceSubscriptionRepository.namedFindAllNotMigratedServiceSubscription();
		List<Long> serviceIds = serviceRepository.namedFindNotMigratedServicesBySrId(srId);
		List<Long> businessServicesIds = businessServiceRepository.namedFindNotMigratedBusinessServicesBySrId(srId);
		
		Map<Long,ObjectTracker> serviceSubscrptionMap = new HashMap<Long,ObjectTracker>();
		
		for (Long id: serviceSubscriptionIds)
		{
			ServiceSubscription ss = serviceSubscriptionService.findServiceSubscriptionById(id);						
			ObjectTracker ot = new ObjectTracker();
			ot.setClassName(ServiceSubscription.class.getName());
			ot.setParentClassName(null);
			ot.setSourceId(id);
			ot.setSourceVersionNum(ss.getVersionNum());		
			ot.setModificationStatus(ChangeType.C);
			serviceSubscrptionMap.put(id, ot);
			
		}

		for (Long id: serviceIds)
		{
			com.abc.tpi.model.service.Service service = serviceSubscriptionService.findEntityUsingEntityGrpah(com.abc.tpi.model.service.Service.class, id, "ServiceEntity.graphServiceId");
			
			if (service !=null)
			{
				Long ssId = service.getServiceSubscription().getId();				

				ObjectTracker ssOt = serviceSubscrptionMap.get(ssId);
				
				if (ssOt==null)
				{
					ServiceSubscription ss = serviceSubscriptionService.findServiceSubscriptionById(ssId);						
					ssOt = new ObjectTracker();
					ssOt.setClassName(ServiceSubscription.class.getName());
					ssOt.setParentClassName(null);
					ssOt.setSourceId(ssId);
					ssOt.setSourceVersionNum(ss.getVersionNum());
					ssOt.setModificationStatus(ChangeType.NA);
					
					ObjectTracker serviceOt = new ObjectTracker();
					serviceOt.setClassName(com.abc.tpi.model.service.Service.class.getName());
					serviceOt.setSourceId(id);
					serviceOt.setSourceVersionNum(service.getVersionNum());
					serviceOt.setParentClassName(ServiceSubscription.class.getName());
					serviceOt.setParentId(ssId);
					serviceOt.setParentVersionNum(ss.getVersionNum());
					serviceOt.setModificationStatus(ChangeType.C);
					ssOt.addObjectTracker(serviceOt);
					
					serviceSubscrptionMap.put(ssId, ssOt);
				}
				else
				{
					ObjectTracker serviceOt = new ObjectTracker();
					serviceOt.setClassName(com.abc.tpi.model.service.Service.class.getName());
					serviceOt.setSourceId(id);
					serviceOt.setSourceVersionNum(service.getVersionNum());
					serviceOt.setParentClassName(ServiceSubscription.class.getName());
					serviceOt.setParentId(ssId);
					serviceOt.setModificationStatus(ChangeType.C);
					ssOt.addObjectTracker(serviceOt);
				}			
			}			
		}
		
		for (Long bsId : businessServicesIds)
		{
			BusinessService businessService = serviceSubscriptionService.findEntityUsingEntityGrpah(com.abc.tpi.model.service.BusinessService.class, bsId, "BusinessServiceEntity.graphServiceId");
			Long ssId = null;
			Long serviceId = null;
			
			if (businessService != null)
			{
				serviceId = businessService.getService().getId();
				ssId = businessService.getService().getServiceSubscription().getId();
				
				ObjectTracker ssOt = serviceSubscrptionMap.get(ssId);
				if (ssOt==null)
				{
					ServiceSubscription ss = serviceSubscriptionService.findServiceSubscriptionById(ssId);						
					ssOt = new ObjectTracker();
					ssOt.setClassName(ServiceSubscription.class.getName());
					ssOt.setParentClassName(null);
					ssOt.setSourceId(ssId);
					ssOt.setSourceVersionNum(ss.getVersionNum());		
					ssOt.setModificationStatus(ChangeType.NA);
					
					ObjectTracker serviceOt = new ObjectTracker();
					serviceOt.setClassName(com.abc.tpi.model.service.Service.class.getName());
					serviceOt.setSourceId(serviceId);
					serviceOt.setSourceVersionNum(businessService.getService().getVersionNum());
					serviceOt.setParentClassName(ServiceSubscription.class.getName());
					serviceOt.setModificationStatus(ChangeType.NA);
					serviceOt.setParentVersionNum(ss.getVersionNum());
					serviceOt.setParentId(ssId);						
					
					ObjectTracker businessServiceOt = new ObjectTracker();
					businessServiceOt.setClassName(BusinessService.class.getName());
					businessServiceOt.setSourceId(bsId);
					businessServiceOt.setParentClassName(com.abc.tpi.model.service.Service.class.getName());
					businessServiceOt.setParentId(serviceId);
					businessServiceOt.setSourceVersionNum(businessService.getVersionNum());
					businessServiceOt.setModificationStatus(ChangeType.C);
					
					serviceOt.addObjectTracker(businessServiceOt);
					ssOt.addObjectTracker(serviceOt);					
					serviceSubscrptionMap.put(ssId, ssOt);
					
				}
				else
				{
					ObjectTracker serviceObjectTracker = null;
					
					if (ssOt.getObjectTrackers()!=null)
					{
					for (ObjectTracker serviceOt : ssOt.getObjectTrackers())
					{
						if (serviceOt.getSourceId()==serviceId)
						{
							serviceObjectTracker = serviceOt;
							break;
						}
					}
					}
					
					if (serviceObjectTracker!=null)
					{
						
						ObjectTracker businessServiceOt = new ObjectTracker();
						businessServiceOt.setClassName(BusinessService.class.getName());
						businessServiceOt.setSourceId(bsId);
						businessServiceOt.setParentClassName(com.abc.tpi.model.service.Service.class.getName());
						businessServiceOt.setParentId(serviceId);
						businessServiceOt.setSourceVersionNum(businessService.getVersionNum());						
						serviceObjectTracker.addObjectTracker(businessServiceOt);
					}
					else
					{
						ObjectTracker serviceOt = new ObjectTracker();
						serviceOt.setClassName(com.abc.tpi.model.service.Service.class.getName());
						serviceOt.setSourceId(serviceId);
						serviceOt.setSourceVersionNum(businessService.getService().getVersionNum());
						serviceOt.setParentClassName(ServiceSubscription.class.getName());
						serviceOt.setParentId(ssId);
						serviceOt.setModificationStatus(ChangeType.NA);
						
						ObjectTracker businessServiceOt = new ObjectTracker();
						businessServiceOt.setClassName(BusinessService.class.getName());
						businessServiceOt.setSourceId(bsId);
						businessServiceOt.setParentClassName(com.abc.tpi.model.service.Service.class.getName());
						businessServiceOt.setParentId(serviceId);
						businessServiceOt.setSourceVersionNum(businessService.getVersionNum());
						
						serviceOt.addObjectTracker(businessServiceOt);
						ssOt.addObjectTracker(serviceOt);
					}
					
				}
				
			}
			
		}
		
		List<ObjectTracker> result = new ArrayList<ObjectTracker>();

		result.addAll(serviceSubscrptionMap.values());

		return result;
	}
}
