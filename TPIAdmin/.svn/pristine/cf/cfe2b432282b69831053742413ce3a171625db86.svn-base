package com.abc.tpi.model.tpp;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import com.abc.tpi.model.master.Direction;
import com.abc.tpi.model.master.Document;
import com.abc.tpi.model.master.Version;

@Entity
@Table(name = "ABC_TPI_TPP_TRANSACTION")
public class Transaction {
	@Id
	@SequenceGenerator(name="ABC_TPI_TPP_TRANSACTION_GEN", sequenceName="ABC_TPI_TPP_TRANSACTION_SEQ",allocationSize=10)
	@GeneratedValue(generator="ABC_TPI_TPP_TRANSACTION_GEN")
	@Column(name = "TRANSACTION_ID")
	private Long id;
	
	@NotNull
	@ManyToOne
	@JoinColumn(name="DIRECTION_ID", nullable=false)
	private Direction direction;
	
	@NotNull
	@ManyToOne
	@JoinColumn(name="DOC_ID", nullable=false)
	private Document document;
	
	@NotNull
	@ManyToOne
	@JoinColumn(name="VERSION_ID", nullable=false)
	private Version version;
	
	public Direction getDirection() {
		return direction;
	}
	public Document getDocument() {
		return document;
	}
	public Long getId() {
		return id;
	}
	public Version getVersion() {
		return version;
	}
	public void setDirection(Direction direction) {
		this.direction = direction;
	}
	public void setDocument(Document document) {
		this.document = document;
	}
	public void setVersion(Version version) {
		this.version = version;
	}
	
	public static Transaction newInstance(Transaction transaction)
	{
		if (transaction==null)
		{
			return transaction;
		}
		Transaction clone = new Transaction();
		clone.setDirection(Direction.newInstance(transaction.getDirection()));
		clone.setDocument(Document.newInstance(transaction.getDocument()));
		clone.setVersion(Version.newInstance(transaction.getVersion()));
		return clone;
		
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((direction == null) ? 0 : direction.hashCode());
		result = prime * result + ((document == null) ? 0 : document.hashCode());
		result = prime * result + ((version == null) ? 0 : version.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Transaction other = (Transaction) obj;
		if (direction == null) {
			if (other.direction != null)
				return false;
		} else if (!direction.equals(other.direction))
			return false;
		if (document == null) {
			if (other.document != null)
				return false;
		} else if (!document.equals(other.document))
			return false;
		if (version == null) {
			if (other.version != null)
				return false;
		} else if (!version.equals(other.version))
			return false;
		return true;
	}
}
