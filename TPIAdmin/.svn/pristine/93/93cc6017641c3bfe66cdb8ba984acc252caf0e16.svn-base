package com.abc.tpi.controller;

import java.util.Collection;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.abc.tpi.common.exceptions.TpiRepositoryException;
import com.abc.tpi.model.Direction;
import com.abc.tpi.model.Document;
import com.abc.tpi.model.Protocol;
import com.abc.tpi.model.TppType;
import com.abc.tpi.model.Version;
import com.abc.tpi.repository.DirectionRepository;
import com.abc.tpi.repository.DocumentRepository;
import com.abc.tpi.repository.ProtocolRepository;
import com.abc.tpi.repository.TppTypeRepository;
import com.abc.tpi.repository.VersionRepository;

@RestController
public class LookUpDataControllerRest {

	private static final Logger logger = LogManager.getLogger(LookUpDataControllerRest.class);
	
	@Autowired
	DocumentRepository documentRepository;
	
	@Autowired
	ProtocolRepository protocolRepository;
	
	@Autowired
	TppTypeRepository tppTypeRepository;
	
	@Autowired 
	VersionRepository versionRepository;
	
	@Autowired
	DirectionRepository directionRepository;	
	
	@RequestMapping(value = { "/documents"}, method = { RequestMethod.GET })
	Collection<Document> getDocuments() throws TpiRepositoryException
	{
		logger.debug("Invoked getDocuments()");
		
		Collection<Document> result = null;
		
		try
		{
			result =  documentRepository.findAll();
		}		
		catch (Exception ex) 
		{
			logger.error("Failed to Retrieve List of Documents. ", ex);
			throw new TpiRepositoryException("Failed to Retrieve List of Documents.");
		}
		
		return result;	
	}
	
	@RequestMapping(value = { "/protocols"}, method = { RequestMethod.GET })
	Collection<Protocol> getProtocols() throws TpiRepositoryException
	{
		logger.debug("Invoked getProtocols()");
		
		Collection<Protocol> result = null;
		
		try
		{
			result =  protocolRepository.findAll();
		}		
		catch (Exception ex) 
		{
			logger.error("Failed to Retrieve List of Protocols. ", ex);
			throw new TpiRepositoryException("Failed to Retrieve List of Protocols.");
		}
		
		return result;	
	}
	
	@RequestMapping(value = { "/tppTypes"}, method = { RequestMethod.GET })
	Collection<TppType> getTppTypes() throws TpiRepositoryException
	{
		logger.debug("Invoked getTppTypes()");
		
		Collection<TppType> result = null;
		
		try
		{
			result =  tppTypeRepository.findAll();
		}		
		catch (Exception ex) 
		{
			logger.error("Failed to Retrieve List of TppType. ", ex);
			throw new TpiRepositoryException("Failed to Retrieve List of TppType.");
		}
		
		return result;	
	}
	
	@RequestMapping(value = { "/versions"}, method = { RequestMethod.GET })
	Collection<Version> getVersions() throws TpiRepositoryException
	{
		logger.debug("Invoked getVersions()");
		
		Collection<Version> result = null;
		
		try
		{
			result =  versionRepository.findAll();
		}		
		catch (Exception ex) 
		{
			logger.error("Failed to Retrieve List of Versions. ", ex);
			throw new TpiRepositoryException("Failed to Retrieve List of Versions.");
		}
		
		return result;	
	}
	
	@RequestMapping(value = { "/directions"}, method = { RequestMethod.GET })
	Collection<Direction> getDirections() throws TpiRepositoryException
	{
		logger.debug("Invoked getDirections()");
		
		Collection<Direction> result = null;
		
		try
		{
			result =  directionRepository.findAll();
		}		
		catch (Exception ex) 
		{
			logger.error("Failed to Retrieve List of Directions. ", ex);
			throw new TpiRepositoryException("Failed to Retrieve List of Directions.");
		}
		
		return result;	
	}
	
}
