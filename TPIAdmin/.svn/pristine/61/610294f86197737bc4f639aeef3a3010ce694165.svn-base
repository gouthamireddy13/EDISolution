package com.abc.tpi.controller;

import java.net.URLDecoder;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.abc.tpi.common.exceptions.TpiRepositoryException;
import com.abc.tpi.common.exceptions.TpiValidationException;
import com.abc.tpi.model.service.ServiceCategory;
import com.abc.tpi.model.service.ServiceCategoryForDropDown;
import com.abc.tpi.model.service.ServiceSubscription;
import com.abc.tpi.model.service.ServiceType;
import com.abc.tpi.service.ServiceSubscriptionService;

@RestController
public class ServiceSubscriptionControllerRest {

	private static final Logger logger = LogManager.getLogger(ServiceSubscriptionControllerRest.class);
	
	@Autowired
	ServiceSubscriptionService serviceSubscriptionService;

	@RequestMapping(value = { "/serviceSubscriptions" }, method = { RequestMethod.GET })
	public ResponseEntity<List<ServiceSubscription>> getServiceSubscriptions() throws TpiRepositoryException {
		
		logger.debug("Invoked ServiceSubscriptionControllerRest.getServiceSubscriptions()");
		
		List<ServiceSubscription> result = null;
		try {
			result = serviceSubscriptionService.getAllServiceSubscriptions();
			return ResponseEntity.status(HttpStatus.OK).body(result);
		} catch (Exception ex) {
			logger.error("Failed to Retrieve List of Service Subscriptions. ", ex);
			throw new TpiRepositoryException("Failed to Retrieve List of Partner Groups.");
		}
	}
	
	@RequestMapping(value={"/serviceTypes"},method={RequestMethod.GET})
	public ResponseEntity<List<ServiceType>> getServiceTypes(HttpServletRequest request, HttpServletResponse response) throws TpiRepositoryException
	{
		long serviceCategoryId = 0;
		long tppId = 0;
		List<ServiceType> serviceTypes = null;
		try
		{
			logger.debug("Invoked ServiceSubscriptionControllerRest.getServiceTypes()");
			
			if (request.getParameter("serviceCat")!=null)
			{
				logger.debug("Querty string: " + request.getQueryString());
				serviceCategoryId=Long.parseLong(URLDecoder.decode(request.getParameter("serviceCat"), "UTF-8"));
				
				if (request.getParameter("tpp")!=null)
				{
					tppId = Long.parseLong(URLDecoder.decode(request.getParameter("tpp"), "UTF-8"));
				}
				
				serviceTypes = serviceSubscriptionService.getBusinessServiceForTppAndServiceCat(serviceCategoryId, tppId);
			}
			else
			{
				serviceTypes = serviceSubscriptionService.getAllServiceTypes();
			}
		}
		
		catch (NumberFormatException numException)
		{
			logger.error("Invalid Request parameter. Numeric value is expected.", numException);
		}
		catch (Exception ex)
		{
			logger.error("Failed to Retrieve List of Service Types. ", ex);
			throw new TpiRepositoryException("Failed to Retrieve List of Service Types.");
		}
		
		return ResponseEntity.status(HttpStatus.OK).body(serviceTypes);
	}

	
	//save
	@RequestMapping (value = { "/serviceSubscriptions" }, method = { RequestMethod.POST })
	public ResponseEntity<ServiceSubscription> save(@RequestBody ServiceSubscription serviceSubscription) throws TpiValidationException, TpiRepositoryException
	{
		ServiceSubscription result = serviceSubscriptionService.saveServiceSubscription(serviceSubscription);
		return ResponseEntity.status(HttpStatus.OK).body(result);		
	}
	
	@RequestMapping(value = {"/serviceCategories"}, method= {RequestMethod.GET})
	public ResponseEntity<List<?>> getServiceCategories(HttpServletRequest request, HttpServletResponse response)
	{
		logger.debug("Invoked ServiceSubscriptionControllerRest.getServiceCategories()");
		
		List<ServiceCategory> serviceCategories=null;
		
		if (request.getParameter("projection")!=null)
		{
			String projectionName=request.getParameter("projection");
			switch (projectionName)
			{
			case "serviceCategoryForDropDown":
				List<ServiceCategoryForDropDown>  dropDownValues = serviceSubscriptionService.getServiceCategoriesForDropDown();
				return ResponseEntity.status(HttpStatus.OK).body(dropDownValues);				
			default:
				serviceCategories = serviceSubscriptionService.getAllServiceCategoriesOrderByName();
				break;
			}			
		}
		else
		{
			serviceCategories = serviceSubscriptionService.getAllServiceCategories();
		}
		
		return ResponseEntity.status(HttpStatus.OK).body(serviceCategories);
	}
	
	@RequestMapping(value = {"/serviceCategories"}, method= {RequestMethod.POST})
	public ResponseEntity<ServiceCategory> saveServiceCategory(@RequestBody ServiceCategory serviceCategory) throws TpiRepositoryException
	{
		ServiceCategory result = serviceSubscriptionService.saveServiceCategory(serviceCategory);
		return ResponseEntity.status(HttpStatus.OK).body(result);	
	}
}
