package com.abc.tpi.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.abc.tpi.model.master.Protocol;
import com.abc.tpi.model.master.Version;
import com.abc.tpi.model.tpp.Tpp;
import com.abc.tpi.model.tpp.TppListViewProjection;
import com.abc.tpi.model.tpp.Transaction;
import com.abc.tpi.repository.ProtocolRepository;
import com.abc.tpi.repository.TppRepository;
import com.abc.tpi.repository.VersionRepository;

@Service
public class TppServiceImpl implements TppService {

	@Autowired
	TppRepository tppRepository;
	
	@Autowired
	ProtocolRepository protocolRepository;
	
	@Autowired
	VersionRepository versionRepository;
	
	@Transactional
	public Tpp saveTpp(Tpp tpp) {
		
		
		return tppRepository.save(tpp);
	}

	@Transactional
	public void deleteTpp(Tpp tpp) {
		tppRepository.delete(tpp);

	}

	@Transactional
	public void deleteTppById(long id) {
		tppRepository.delete(id);

	}

	@Transactional
	public Tpp addProtocol(Protocol protocol) {
		// TODO Auto-generated method stub
		return null;
	}

	@Transactional
	public Tpp addTransaction(Transaction transaction) {
		// TODO Auto-generated method stub
		return null;
	}

	@Transactional
	public Tpp removeProtocol(Protocol protocol) {
		// TODO Auto-generated method stub
		return null;
	}

	@Transactional
	public Tpp removeProtocolByID(long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Transactional
	public Tpp removeTransaction(Transaction transaction) {
		// TODO Auto-generated method stub
		return null;
	}

	@Transactional
	public Tpp removeTransactionById(long id) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public Tpp findTppById(long id) {
		// 
		return tppRepository.findOne(id);
	}

	public List<Tpp> findAllTpps() {
		return tppRepository.findAll();
	}

	public List<Tpp> findTppByName(String name) {		
		return tppRepository.findByNameContainingIgnoreCase(name);
	}

	@Override
	public Tpp findByNameFullStringMatchIgnoreCase(String name) {
		return tppRepository.findByNameIgnoreCase(name);
	}

	@Override
	public boolean tppWithNameExists(String name) {
		boolean result = false;
		if (tppRepository.findByNameIgnoreCase(name)!=null)
		{
			result = true;
		}

		return result;
	}

	@Override
	public List<Protocol> getProtocolsForTppId(long tppId) {		
		return protocolRepository.namedFindAllProtocolsForTpp(tppId);
	}

	@Override
	public List<Version> getVersionsForTppId(long tppId) {
		return versionRepository.namedFindAllVersionsForTpp(tppId);
	}

	@Override
	public List<TppListViewProjection> getTppProjectionForListView() {
		return tppRepository.findAllByOrderByName();
	}

	@Override
	public List<Long> getTppsForAbcId(String testIsaId, String testGsId, String prodIsaId, String prodGsId) 
	{
		return tppRepository.namedFindByAbcId(testIsaId,testGsId,prodIsaId,prodGsId);
	}

	@Override
	public boolean isDuplicateTppForAbcId(String testIsaId, String testGsId, String prodIsaId, String prodGsId,
			long tppId) 
	{
		boolean result = false;
		List <Long> tpps = tppRepository.namedFindByAbcIdAndTppId(testIsaId,testGsId,prodIsaId,prodGsId,tppId);
		if (tpps!=null && !tpps.isEmpty())
		{
			result = true;
		}
		return result;
	}

}
