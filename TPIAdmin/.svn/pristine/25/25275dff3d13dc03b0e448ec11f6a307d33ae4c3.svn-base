package com.abc.tpi.controller;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.abc.tpi.common.exceptions.TpiRepositoryException;
import com.abc.tpi.service.ServiceSubscriptionService;

@RestController
@RequestMapping("/search")
public class SearchControllerRest {

	private static final Logger logger = LogManager.getLogger(SearchControllerRest.class);
	
	@Autowired
	ServiceSubscriptionService serviceSubscriptionService;

	@RequestMapping(method = {RequestMethod.GET})
	public ResponseEntity<?> getSearchResults(@RequestParam(name="q",required=true) String queryName, 
											  @RequestParam(name="filter",required=false) String queryFilter) 
											  throws TpiRepositoryException 
	{

		Object result = null;
		logger.debug("Executing getSearchResults() for " + queryName);
		
		switch (queryName)
		{
			case "serviceSubscriptionsWithLW":
			{
				result = serviceSubscriptionService.getAllServiceSubscriptionsWithGsIdIsId();
				break;
			}

			default:
				logger.warn(queryName + " is not a valid search");
				result = "Invalid search option";
		}
		
		return ResponseEntity.status(HttpStatus.OK).body(result);
	}
	

	
}
