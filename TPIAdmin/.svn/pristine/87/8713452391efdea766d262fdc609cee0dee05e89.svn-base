package com.abc.tpi.model.service;

import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.NamedAttributeNode;
import javax.persistence.NamedEntityGraph;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.NamedSubgraph;
import javax.persistence.Table;

import org.hibernate.envers.Audited;

import com.abc.tpi.service.TpiManagedEntityListener;

@Audited
@Entity
@Table(name="ABC_TPI_BUSINESS_SERVICE")
@NamedQueries
(
	{
	@NamedQuery(name="BusinessService.namedFindBusinessServicesByServiceId", 
			query="select bs from Service sc join sc.businessServices bs where sc.id = :serviceId"),
	@NamedQuery(name="BusinessService.namedFindBusinessServicesByServiceSubscriptionAndServiceId", 
			query="select bs from ServiceSubscription ss join ss.services sc join sc.businessServices bs where ss.id = :subscriptionId and sc.id = :serviceId"),
	@NamedQuery(name="BusinessService.namedInEnvelopeBySrId", 
			query="select NEW com.abc.tpi.model.reporting.PartnerSubscriptionRecord("
					+ " ss.partner.partnerName,"
					+ " bs.serviceType.document.documentType, "
					+ " bs.serviceType.direction.directionCode, "
					+ " sc.lightWellPartner.testIsaQualifier, "
					+ " sc.lightWellPartner.testIsaID, "
					+ " sc.lightWellPartner.testGsId, "
					+ " sc.lightWellPartner.productionIsaQualifier, "
					+ " sc.lightWellPartner.productionIsaID, "
					+ " sc.lightWellPartner.productionGsId, "
					+ " sc.segmentDelimiter.delimiter, "
					+ " sc.elementDelimiter.delimiter, "
					+ " sc.compositeElementDelimiter.delimiter, " 
					+ " sc.repeatDelimiter.delimiter, "
					+ " bs.version.versionNumber, "
					+ " bs.lightWellPartner.testIsaQualifier,"
					+ " bs.lightWellPartner.testIsaID, "
					+ " bs.lightWellPartner.testGsId, "
					+ " bs.lightWellPartner.productionIsaQualifier, "
					+ " bs.lightWellPartner.productionIsaID, "
					+ " bs.lightWellPartner.productionGsId, "
					+ " bs.ackPeriod, "
					+ " bs.ack, "
					+ " bs.complianceCheck,"
					+ " m.mapName ) " 
					+ " from ServiceSubscription ss join ss.services sc join sc.businessServices bs left join bs.map m"
					+ " where bs.srId = :srId "
					+ " order by ss.partner.partnerName"),
	@NamedQuery(name="BusinessService.namedInEnvelopeByServiceSubscriptionId", 
			query="select NEW com.abc.tpi.model.reporting.PartnerSubscriptionRecord("
					+ " ss.partner.partnerName,"
					+ " bs.serviceType.document.documentType, "
					+ " bs.serviceType.direction.directionCode, "
					+ " sc.lightWellPartner.testIsaQualifier, "
					+ " sc.lightWellPartner.testIsaID, "
					+ " sc.lightWellPartner.testGsId, "
					+ " sc.lightWellPartner.productionIsaQualifier, "
					+ " sc.lightWellPartner.productionIsaID, "
					+ " sc.lightWellPartner.productionGsId, "
					+ " sc.segmentDelimiter.delimiter, "
					+ " sc.elementDelimiter.delimiter, "
					+ " sc.compositeElementDelimiter.delimiter, " 
					+ " sc.repeatDelimiter.delimiter, "
					+ " bs.version.versionNumber, "
					+ " bs.lightWellPartner.testIsaQualifier,"
					+ " bs.lightWellPartner.testIsaID, "
					+ " bs.lightWellPartner.testGsId, "
					+ " bs.lightWellPartner.productionIsaQualifier, "
					+ " bs.lightWellPartner.productionIsaID, "
					+ " bs.lightWellPartner.productionGsId, "
					+ " bs.ackPeriod, "
					+ " bs.ack, "
					+ " bs.complianceCheck,"
					+ " m.mapName ) " 
					+ " from ServiceSubscription ss join ss.services sc join sc.businessServices bs left join bs.map m"
					+ " where ss.id = :subscriptionId"),
	@NamedQuery(name="BusinessService.namedGenericInEnvelopeByServiceSubscriptionId", 
			query="select "
					+ " ss.partner.partnerName,"
					+ " bs.serviceType.document.documentType, "
					+ " bs.serviceType.direction.directionCode, "
					+ " sc.lightWellPartner.testIsaQualifier, "
					+ " sc.lightWellPartner.testIsaID, "
					+ " sc.lightWellPartner.testGsId, "
					+ " sc.lightWellPartner.productionIsaQualifier, "
					+ " sc.lightWellPartner.productionIsaID, "
					+ " sc.lightWellPartner.productionGsId, "
					+ " sc.segmentDelimiter.delimiter, "
					+ " sc.elementDelimiter.delimiter, "
					+ " sc.compositeElementDelimiter.delimiter, " 
					+ " sc.repeatDelimiter.delimiter, "
					+ " bs.version.versionNumber, "
					+ " bs.lightWellPartner.testIsaQualifier,"
					+ " bs.lightWellPartner.testIsaID, "
					+ " bs.lightWellPartner.testGsId, "
					+ " bs.lightWellPartner.productionIsaQualifier, "
					+ " bs.lightWellPartner.productionIsaID, "
					+ " bs.lightWellPartner.productionGsId, "
					+ " bs.ackPeriod, "
					+ " bs.ack "
					+ " from ServiceSubscription ss join ss.services sc join sc.businessServices bs "
					+ " where ss.id = :subscriptionId"),
	@NamedQuery(name="BusinessService.namedInEnvelopeBySrIdBusinessServiceIds", 
					query="select NEW com.abc.tpi.model.reporting.PartnerSubscriptionRecord("
					+ " ss.partner.partnerName,"
					+ " bs.serviceType.document.documentType, "
					+ " bs.serviceType.direction.directionCode, "
					+ " sc.lightWellPartner.testIsaQualifier, "
					+ " sc.lightWellPartner.testIsaID, "
					+ " sc.lightWellPartner.testGsId, "
					+ " sc.lightWellPartner.productionIsaQualifier, "
					+ " sc.lightWellPartner.productionIsaID, "
					+ " sc.lightWellPartner.productionGsId, "
					+ " sc.segmentDelimiter.delimiter, "
					+ " sc.elementDelimiter.delimiter, "
					+ " sc.compositeElementDelimiter.delimiter, " 
					+ " sc.repeatDelimiter.delimiter, "
					+ " bs.version.versionNumber, "
					+ " bs.lightWellPartner.testIsaQualifier,"
					+ " bs.lightWellPartner.testIsaID, "
					+ " bs.lightWellPartner.testGsId, "
					+ " bs.lightWellPartner.productionIsaQualifier, "
					+ " bs.lightWellPartner.productionIsaID, "
					+ " bs.lightWellPartner.productionGsId, "
					+ " bs.ackPeriod, "
					+ " bs.ack, "
					+ " bs.complianceCheck,"
					+ " m.mapName ) " 
					+ " from ServiceSubscription ss join ss.services sc join sc.businessServices bs left join bs.map m"
					+ " where bs.srId = :srId "
					+ " and bs.id IN :ids"
					+ " order by ss.partner.partnerName")
					,
					@NamedQuery(name="BusinessService.namedFindAllNotMigratedBusinessServices",
					query="select s.id " 
							+ " from BusinessService s "
							+ " where NOT EXISTS "
							+ "	(select 1 from ObjectTracker ot "
							+ "		where s.id = ot.sourceId "
							+ "		and s.versionNum = ot.sourceVersionNum "
							+ "		and ot.className = 'com.abc.tpi.model.service.com.abc.tpi.model.service.BusinessService')"
			),
					@NamedQuery(name="BusinessService.namedFindNotMigratedBusinessServicesBySrId",
					query="select s.id " 
							+ " from BusinessService s "
							+ " where NOT EXISTS "
							+ "	(select 1 from ObjectTracker ot "
							+ "		where s.id = ot.sourceId "
							+ "		and s.versionNum = ot.sourceVersionNum "
							+ "		and ot.className = 'com.abc.tpi.model.service.com.abc.tpi.model.service.BusinessService')"
							+ "	and s.srId = :srId"
			)									
	}
	
)
@EntityListeners({TpiManagedEntityListener.class})
@NamedEntityGraph(name="BusinessServiceEntity.graphServiceId",
attributeNodes=
{
	@NamedAttributeNode(value="service",subgraph="service")
},
subgraphs={
	@NamedSubgraph(name="service",
			attributeNodes={
					@NamedAttributeNode("id")
			})
}
)
public class BusinessService extends BusinessServiceEntity {

}
