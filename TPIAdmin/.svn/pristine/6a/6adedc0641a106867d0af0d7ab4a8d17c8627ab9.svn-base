package com.abc.tpi.model.service;

import javax.persistence.Entity;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import org.hibernate.envers.AuditOverride;
import org.hibernate.envers.Audited;

@Audited
@Entity
@AuditOverride(forClass=com.abc.tpi.model.service.BusinessServiceEntity.class,isAudited=true)
@Table(name="ABC_TPI_BUSINESS_SERVICE")
@NamedQueries
(
	{
	@NamedQuery(name="BusinessService.namedFindBusinessServicesByServiceId", 
			query="select bs from Service sc join sc.businessServices bs where sc.id = :serviceId"),
	@NamedQuery(name="BusinessService.namedFindBusinessServicesByServiceSubscriptionAndServiceId", 
			query="select bs from ServiceSubscription ss join ss.services sc join sc.businessServices bs where ss.id = :subscriptionId and sc.id = :serviceId"),
	@NamedQuery(name="BusinessService.namedInEnvelopeBySrId", 
			query="select NEW com.abc.tpi.model.reporting.PartnerSubscriptionRecord("
					+ " ss.partner.partnerName,"
					+ " bs.serviceType.document.documentType, "
					+ " bs.serviceType.direction.directionCode, "
					+ " sc.lightWellPartner.testIsaQualifier, "
					+ " sc.lightWellPartner.testIsaID, "
					+ " sc.lightWellPartner.testGsId, "
					+ " sc.lightWellPartner.productionIsaQualifier, "
					+ " sc.lightWellPartner.productionIsaID, "
					+ " sc.lightWellPartner.productionGsId, "
					+ " sc.segmentDelimiter.delimiter, "
					+ " sc.elementDelimiter.delimiter, "
					+ " sc.compositeElementDelimiter.delimiter, " 
					+ " sc.repeatDelimiter.delimiter, "
					+ " bs.version.versionNumber, "
					+ " bs.lightWellPartner.testIsaQualifier,"
					+ " bs.lightWellPartner.testIsaID, "
					+ " bs.lightWellPartner.testGsId, "
					+ " bs.lightWellPartner.productionIsaQualifier, "
					+ " bs.lightWellPartner.productionIsaID, "
					+ " bs.lightWellPartner.productionGsId, "
					+ " bs.ackPeriod, "
					+ " bs.ack, "
					+ " bs.complianceCheck,"
					+ " m.mapName ) " 
					+ " from ServiceSubscription ss join ss.services sc join sc.businessServices bs left join bs.map m"
					+ " where bs.srId = :srId "
					+ " order by ss.partner.partnerName"),
	@NamedQuery(name="BusinessService.namedInEnvelopeByServiceSubscriptionId", 
			query="select NEW com.abc.tpi.model.reporting.PartnerSubscriptionRecord("
					+ " ss.partner.partnerName,"
					+ " bs.serviceType.document.documentType, "
					+ " bs.serviceType.direction.directionCode, "
					+ " sc.lightWellPartner.testIsaQualifier, "
					+ " sc.lightWellPartner.testIsaID, "
					+ " sc.lightWellPartner.testGsId, "
					+ " sc.lightWellPartner.productionIsaQualifier, "
					+ " sc.lightWellPartner.productionIsaID, "
					+ " sc.lightWellPartner.productionGsId, "
					+ " sc.segmentDelimiter.delimiter, "
					+ " sc.elementDelimiter.delimiter, "
					+ " sc.compositeElementDelimiter.delimiter, " 
					+ " sc.repeatDelimiter.delimiter, "
					+ " bs.version.versionNumber, "
					+ " bs.lightWellPartner.testIsaQualifier,"
					+ " bs.lightWellPartner.testIsaID, "
					+ " bs.lightWellPartner.testGsId, "
					+ " bs.lightWellPartner.productionIsaQualifier, "
					+ " bs.lightWellPartner.productionIsaID, "
					+ " bs.lightWellPartner.productionGsId, "
					+ " bs.ackPeriod, "
					+ " bs.ack, "
					+ " bs.complianceCheck,"
					+ " m.mapName ) " 
					+ " from ServiceSubscription ss join ss.services sc join sc.businessServices bs left join bs.map m"
					+ " where ss.id = :subscriptionId"),
	@NamedQuery(name="BusinessService.namedGenericInEnvelopeByServiceSubscriptionId", 
			query="select "
					+ " ss.partner.partnerName,"
					+ " bs.serviceType.document.documentType, "
					+ " bs.serviceType.direction.directionCode, "
					+ " sc.lightWellPartner.testIsaQualifier, "
					+ " sc.lightWellPartner.testIsaID, "
					+ " sc.lightWellPartner.testGsId, "
					+ " sc.lightWellPartner.productionIsaQualifier, "
					+ " sc.lightWellPartner.productionIsaID, "
					+ " sc.lightWellPartner.productionGsId, "
					+ " sc.segmentDelimiter.delimiter, "
					+ " sc.elementDelimiter.delimiter, "
					+ " sc.compositeElementDelimiter.delimiter, " 
					+ " sc.repeatDelimiter.delimiter, "
					+ " bs.version.versionNumber, "
					+ " bs.lightWellPartner.testIsaQualifier,"
					+ " bs.lightWellPartner.testIsaID, "
					+ " bs.lightWellPartner.testGsId, "
					+ " bs.lightWellPartner.productionIsaQualifier, "
					+ " bs.lightWellPartner.productionIsaID, "
					+ " bs.lightWellPartner.productionGsId, "
					+ " bs.ackPeriod, "
					+ " bs.ack "
					+ " from ServiceSubscription ss join ss.services sc join sc.businessServices bs "
					+ " where ss.id = :subscriptionId"),
	@NamedQuery(name="BusinessService.namedInEnvelopeBySrIdBusinessServiceIds", 
					query="select NEW com.abc.tpi.model.reporting.PartnerSubscriptionRecord("
					+ " ss.partner.partnerName,"
					+ " bs.serviceType.document.documentType, "
					+ " bs.serviceType.direction.directionCode, "
					+ " sc.lightWellPartner.testIsaQualifier, "
					+ " sc.lightWellPartner.testIsaID, "
					+ " sc.lightWellPartner.testGsId, "
					+ " sc.lightWellPartner.productionIsaQualifier, "
					+ " sc.lightWellPartner.productionIsaID, "
					+ " sc.lightWellPartner.productionGsId, "
					+ " sc.segmentDelimiter.delimiter, "
					+ " sc.elementDelimiter.delimiter, "
					+ " sc.compositeElementDelimiter.delimiter, " 
					+ " sc.repeatDelimiter.delimiter, "
					+ " bs.version.versionNumber, "
					+ " bs.lightWellPartner.testIsaQualifier,"
					+ " bs.lightWellPartner.testIsaID, "
					+ " bs.lightWellPartner.testGsId, "
					+ " bs.lightWellPartner.productionIsaQualifier, "
					+ " bs.lightWellPartner.productionIsaID, "
					+ " bs.lightWellPartner.productionGsId, "
					+ " bs.ackPeriod, "
					+ " bs.ack, "
					+ " bs.complianceCheck,"
					+ " m.mapName ) " 
					+ " from ServiceSubscription ss join ss.services sc join sc.businessServices bs left join bs.map m"
					+ " where bs.srId = :srId "
					+ " and bs.id IN :ids"
					+ " order by ss.partner.partnerName")												
	}
	
)
public class BusinessService extends BusinessServiceEntity {

}
