package com.abc.tpi.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.abc.tpi.common.exceptions.TpiRepositoryException;
import com.abc.tpi.model.ContactDetail;
import com.abc.tpi.model.Partner;
import com.abc.tpi.model.PartnerGroup;
import com.abc.tpi.repository.PartnerGroupRepository;
import com.abc.tpi.repository.PartnerRepository;

@Service
public class PartnerServiceImpl implements PartnerService {

	@Autowired
	PartnerRepository partnerRepository;
	@Autowired
	PartnerGroupRepository partnerGroupRepository;

	
	@Transactional
	public Partner createPartner(Partner partner) throws TpiRepositoryException {


		if (partner.getPartnerGroup() != null && partner.getPartnerGroup().getId() !=null)
		{
			PartnerGroup partnerGroup = partnerGroupRepository.findOne(partner.getPartnerGroup().getId());
			if (partnerGroup !=null)
			{
				partner.setPartnerGroup(partnerGroup);
			}
		}
		
		if (partner.getPartnerGroup() != null && partner.getPartnerGroup().getId() == null)
		{
			partner.setPartnerGroup(null);
		}
		
		
		if (partner.getContactDetails()== null || partner.getContactDetails().isEmpty())
		{
			throw new TpiRepositoryException("Partner Contact Details missing");
		}
	
		Partner result = partnerRepository.save(partner);		
		
		return result;
	}

	@Transactional
	public Partner updatePartner(Partner partner) {
		Partner result = partnerRepository.save(partner);
		return result;
	}

	@Transactional
	public void deletePartner(Partner partner) {
		partnerRepository.delete(partner);

	}

	@Transactional
	public void deletePartnerById(long id) {
		Partner partner = partnerRepository.findOne(id);
		if (partner!=null)
		{
			partnerRepository.delete(partner);
		}

	}

	@Transactional
	public Partner addContactDetail(Partner partner, ContactDetail contactDetail) {
		partner.getContactDetails().add(contactDetail);
		partner = partnerRepository.save(partner);
		return partner;
	}

	@Transactional
	public Partner addContactDetailByPartnerId(long id, ContactDetail contactDetail) {
		Partner partner = partnerRepository.findOne(id);
		if (partner!=null)
		{
			//partner = partner.getContactDetails().add
			
		}
		return null;
	}

	@Transactional
	public Partner removeContactDetail(Partner partner, ContactDetail contactDetail) {
		// TODO Auto-generated method stub
		return null;
	}

	@Transactional
	public Partner removeContactDetailByPartnerId(long id, ContactDetail contactDetail) {
		// TODO Auto-generated method stub
		return null;
	}

	@Transactional
	public Partner removeContactDetailByPartnerIdContactDetailId(long partnerId, long contactDetailId) {
		// TODO Auto-generated method stub
		return null;
	}

	
	public List<Partner> findAllPartners() {
		return partnerRepository.findAll();
	}
	
	public List<Partner> findPartnersByName(String name) {
		// TODO Auto-generated method stub
		return null;
	}

	public Partner findPartnerById(long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Transactional
	public Partner addPartnerGroup(Partner partner, PartnerGroup partnerGroup) {
		// TODO Auto-generated method stub
		return null;
	}

	@Transactional
	public Partner removePartnerGroup(Partner partner, PartnerGroup partnerGroup) {
		// TODO Auto-generated method stub
		return null;
	}

	@Transactional
	public Partner removePartnerGroupByPartnerGroupID(Partner partner, long id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Partner> findPartnersByNameContains(String name) {
		List<Partner> result = partnerRepository.findByPartnerNameContainingIgnoreCase(name);
		return result;
	}

	@Override
	public List<String> getDistinctGroupNames() {
		List<String> result =  partnerGroupRepository.namedFindDistinctGroupNames();
		return result;
	}

	@Override
	public List<PartnerGroup> getSubGroupsForGroup(String groupName) {
		
		return partnerGroupRepository.findByGroupNameIgnoreCaseOrderBySubGroupNameAsc(groupName);
	}

	@Override
	public boolean isPartnerExist(String partnerName) {
		boolean result = false;
		Partner partner = partnerRepository.findFirstByPartnerNameIgnoreCase(partnerName);
		if (partner != null)
		{
			result = true;
		}
		return result;
	}


}
