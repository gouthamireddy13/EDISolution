package com.abc.tpi.model.poc;

import java.util.ArrayList;

import javax.persistence.AssociationOverride;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Loader;
import org.hibernate.annotations.ResultCheckStyle;
import org.hibernate.annotations.SQLDelete;
import org.hibernate.annotations.Where;
import org.hibernate.envers.AuditOverride;

import com.abc.tpi.domain.core.Approvable;
import com.abc.tpi.domain.core.ApprovableEntityEnum;

@Entity
@AssociationOverride(
        name="pocs",
        joinTable=@JoinTable(
           name="ABC_POC_PARENT_CHILD_WIP",
           joinColumns=@JoinColumn(name="PARENT_ID"),
           inverseJoinColumns=@JoinColumn(name="POC_ID")
        )
      )

@Table(name="ABC_TPI_POC_PARENT_WIP")
@AuditOverride(forClass=com.abc.tpi.model.poc.PocParentEntity.class,isAudited=false)
@SQLDelete(sql="UPDATE ABC_TPI_POC_PARENT_WIP SET DELETED = 1 WHERE POC_ID = ? and VERSION_NUM =? ",callable=false,check=ResultCheckStyle.NONE)
@Where (clause = "DELETED = 0")
@Loader(namedQuery="findPocParentWipById")
@NamedQuery(name = "findPocParentWipById", query = "SELECT poc FROM PocParentWip poc WHERE poc.id = ?1 AND poc.deleted = false")
public class PocParentWip extends PocParentEntity<PocWip> implements Approvable<PocParent>{

	
	@Column(name="DELETED")
	private boolean deleted = false;
	
	@NotNull(message="State value is required")
	@Column(name="STATE", nullable=false)
	private ApprovableEntityEnum state = ApprovableEntityEnum.DRAFT;

	@Override
	public boolean isDeleted() {
		return deleted;
	}

	@Override
	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}

	@Override
	public PocParent cloneToFInal() {
		PocParent result = new PocParent();
		result.setPocs(new ArrayList<Poc>());
		result.setDescription(this.getDescription());
		
		for (PocWip poc: this.getPocs())
		{
			Poc newPoc = poc.cloneToFInal();
			result.getPocs().add(newPoc);
		}
		return result;
	}

	@Override
	public PocParent updateFinal(PocParent finalObject) {
		finalObject.setDescription(this.getDescription());
		return finalObject;
	}

	@Override
	public ApprovableEntityEnum getState() {		
		return this.state;
	}

	@Override
	public void setState(ApprovableEntityEnum state) {
		this.state = state;
		
	}

	@Override
	public boolean hasParent() {
		return false;
	}

}
