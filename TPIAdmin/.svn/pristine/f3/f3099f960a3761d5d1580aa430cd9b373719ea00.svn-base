package com.abc.tpi.controller;

import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.rest.webmvc.ResourceNotFoundException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.abc.tpi.common.exceptions.TpiRepositoryException;
import com.abc.tpi.common.exceptions.TpiValidationException;
import com.abc.tpi.model.master.Protocol;
import com.abc.tpi.model.master.Version;
import com.abc.tpi.model.tpp.Tpp;
import com.abc.tpi.service.TppService;

@RestController
@RequestMapping("/tpps")
public class TppControllerRest {

	private static final Logger logger = LogManager.getLogger(TppControllerRest.class);
	
	@Autowired
	TppService tppService;
	
	//find all or by name
	@RequestMapping (method = { RequestMethod.GET })
	ResponseEntity<List<Tpp>> readTPPs(HttpServletRequest request, HttpServletResponse response)
	{	
		Logger logger = LogManager.getLogger(TppControllerRest.class);
		logger.debug("Invoked TPPControllerRest.readTPPs()");
		
		List<Tpp> result = null;
		
		String name=null;
		String tppName = null;		
		
		if (request.getParameter("name")!=null)
		{
			try 
			{
				name = URLDecoder.decode(request.getParameter("name"), "UTF-8");
			} 
			catch (Exception ex) {
				logger.error("Invalid value passed for 'name' request parameter");
				logger.error(ex);
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(result);
			}
		}
		else if (request.getParameter("nameContains")!=null)
		{
			try 
			{
				tppName = URLDecoder.decode(request.getParameter("nameContains"), "UTF-8");
			} 
			catch (Exception ex) {
				logger.error("Invalid value passed for 'nameContains' request parameter");
				logger.error(ex);
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(result);
			}		
		}
		
		if (name!=null)
		{
			Tpp tpp = tppService.findByNameFullStringMatchIgnoreCase(name);
			if (tpp !=null)
			{
				result = new ArrayList<Tpp>();
				result.add(tpp);
			}
		}		
		else if (tppName != null)
		{
			result = tppService.findTppByName(tppName); 
		}		
		else
		{
			result = tppService.findAllTpps();			
		}
		
		return ResponseEntity.status(HttpStatus.OK).body(result);
	}
	
	//save
	@RequestMapping (method = { RequestMethod.POST })
	ResponseEntity<Tpp> save(@RequestBody Tpp tpp) throws TpiValidationException, TpiRepositoryException
	{
		Logger logger = LogManager.getLogger(TppControllerRest.class);
		logger.debug("Invoked TPPControllerRest.save()");
		
		validateTppData(tpp);
		
		try
		{
			Tpp newTpp = tppService.saveTpp(tpp);
			logger.debug("TPP saved with ID: " + tpp.getId());
			return ResponseEntity.status(HttpStatus.OK).body(newTpp);
		}
		catch (Exception ex) 
		{
			logger.error("Failed to Save TPP object. ", ex);
			throw new TpiRepositoryException("Failed to Save TPP object. ");
		}
	}
	
	@RequestMapping(value = { "/{tppID}" }, method = { RequestMethod.GET })
	public ResponseEntity<Tpp> getTpp(@PathVariable("tppID") int tppId) throws TpiRepositoryException
	{
		Logger logger = LogManager.getLogger(TppControllerRest.class);
		logger.debug("Invoked TPPControllerRest.getTpp()");
		
		Tpp result = null;
		
		try
		{
			result = tppService.findTppById(tppId);
			return ResponseEntity.status(HttpStatus.OK).body(result);
		}
		catch (Exception ex) 
		{
			logger.error("Failed to retrieve TPP object with ID: . " + tppId, ex);
			throw new TpiRepositoryException("Failed to retrieve TPP object with ID: . " + tppId);
		}
	}

	@RequestMapping(value = { "/{tppID}" }, method = { RequestMethod.DELETE })
	public ResponseEntity<Void> deleteTppByID(@PathVariable("tppID") int tppID) throws TpiRepositoryException {

		Logger logger = LogManager.getLogger(PartnerControllerRest.class);
		logger.debug("Invoked PartnerController.deleteTppByID()");

		try 
		{
			int id = tppID;
			tppService.deleteTppById(id);
			return ResponseEntity.noContent().build();
		} 
		 	catch (ResourceNotFoundException e) 
		{
			return ResponseEntity.notFound().build();
		}
		catch (Exception ex) 
		
		{
			logger.error("Failed to delete TPP object with ID: . " + tppID, ex);
			throw new TpiRepositoryException("Failed to delete TPP object with ID: . " + tppID);
		}
	}
	
	@RequestMapping(value = { "/exists" }, method = { RequestMethod.GET })
	public ResponseEntity<String> isTppExists(HttpServletRequest request, HttpServletResponse response) throws TpiRepositoryException, TpiValidationException 
	{
		logger.debug("Invoked TppControllerRest.isTppExists()");
		logger.debug("Querty string: " + request.getQueryString());
		
		String result = "false";
		String tppName = null;
		try 
		{
			tppName = URLDecoder.decode(request.getParameter("name"), "UTF-8");
		} 
		
		catch (Exception ex) {
			logger.error("Failed to Decode Tpp Name URL Request Parameter. ", ex);
			throw new TpiRepositoryException("Failed to Decode Tpp Name URL Request Parameter.");
		}
		
		if (tppName!=null)
		{
			if (tppService.tppWithNameExists(tppName)) 
			{
				result= "true";
			}
		}
		else
		{
			logger.error("Invalid value passed for 'name' request parameter");
			throw new TpiValidationException("Tpp Name is invalid");
		}
		
		return ResponseEntity.status(HttpStatus.OK).body(result);
	}
	
	private void validateTppData(Tpp tpp) throws TpiValidationException
	{
		if (tpp == null) throw new TpiValidationException("TPP object is null");
		if (tpp.getType()==null) throw new TpiValidationException("TPP type cannot be null");
		if (tpp.getProtocols()==null || tpp.getProtocols().size()<1) throw new TpiValidationException("TPP definition must contain at least one Protocol");		
	}
	
	@RequestMapping(value = { "/{tppID}/transactionVersions" }, method = { RequestMethod.GET })
	public ResponseEntity<List<Version>> getVersionsInTpp(@PathVariable("tppID") int tppId) throws TpiRepositoryException
	{
		Logger logger = LogManager.getLogger(TppControllerRest.class);
		logger.debug("Invoked getVersionsInTpp()");
		
		List<Version> result = null;
		
		try
		{
			result = tppService.getVersionsForTppId(tppId);
			return ResponseEntity.status(HttpStatus.OK).body(result);
		}
		catch (Exception ex) 
		{
			logger.error("Failed to retrieve Version objects for Tpp with ID: . " + tppId, ex);
			throw new TpiRepositoryException("Failed to retrieve Version objects for Tpp with ID: . " + tppId);
		}
	}
	
	@RequestMapping(value = { "/{tppID}/protocols" }, method = { RequestMethod.GET })
	public ResponseEntity<List<Protocol>> getTppProtocols(@PathVariable("tppID") int tppId) throws TpiRepositoryException
	{
		Logger logger = LogManager.getLogger(TppControllerRest.class);
		logger.debug("Invoked getTppProtocols()");
		
		List<Protocol> result = null;
		
		try
		{
			result = tppService.getProtocolsForTppId(tppId);
			return ResponseEntity.status(HttpStatus.OK).body(result);
		}
		catch (Exception ex) 
		{
			logger.error("Failed to retrieve Protocol objects for Tpp with ID: . " + tppId, ex);
			throw new TpiRepositoryException("Failed to retrieve Protocol objects for Tpp with ID: . " + tppId);
		}
	}
	
	
}
