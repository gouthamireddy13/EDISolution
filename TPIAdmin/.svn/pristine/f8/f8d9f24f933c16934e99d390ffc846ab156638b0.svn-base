package com.abc.tpi.controller;

import java.net.URLDecoder;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.abc.tpi.model.Partner;
import com.abc.tpi.model.PartnerGroup;
import com.abc.tpi.service.PartnerGroupService;

@Controller
public class PartnerGroupControllerRest {

	@Autowired
	PartnerGroupService partnerGroupService;

	@RequestMapping(value = { "/partnerGroupNames" }, method = { RequestMethod.GET })
	public ResponseEntity getPartnerGroupNames() {

		List<String> result = null;
		try {
			result = partnerGroupService.getDistinctPartnerGroupNamesForDropDown();
			return ResponseEntity.status(HttpStatus.OK).body(result);
		} catch (Exception ex) {
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body(ex.getMessage());

		}
	}
	
	@RequestMapping(value = { "/partnerGroups/{groupID}" }, method = { RequestMethod.GET })
	public ResponseEntity getPartnerGroup(@PathVariable("groupID") int groupID) {

		PartnerGroup partnerGroup = null;
		try {
			partnerGroup = partnerGroupService.getPartnerGroupById(groupID);
			return ResponseEntity.status(HttpStatus.OK).body(partnerGroup);
		} catch (Exception ex) {
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body(ex.getMessage());

		}
	}
	
	@RequestMapping(value = { "/partnerGroups" }, method = { RequestMethod.GET })
	public ResponseEntity getPartnerGroups() {

		List<PartnerGroup> partnerGroups = null;
		try {
			partnerGroups = partnerGroupService.getAllPartnerGroups();
			return ResponseEntity.status(HttpStatus.OK).body(partnerGroups);
		} catch (Exception ex) {
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body(ex.getMessage());

		}
	}
	
	@RequestMapping(value = { "/partnerGroups" }, method = { RequestMethod.POST })
	public ResponseEntity<PartnerGroup> savePartnerGroups(@RequestBody PartnerGroup partnerGroup) {

		PartnerGroup result = null;
		try {
			result = partnerGroupService.savePartnerGroup(partnerGroup);
			return ResponseEntity.status(HttpStatus.OK).body(result);
		} catch (Exception ex) {
			return ResponseEntity.status(HttpStatus.FORBIDDEN).body(null);

		}
	}
	
	@RequestMapping(value = { "/partnerGroups/{groupID}" }, method = { RequestMethod.DELETE })
	public ResponseEntity deletePartnerGroupByID(@PathVariable("groupID") int groupID) {

		Logger logger = LogManager.getLogger(PartnerGroupControllerRest.class);
		logger.debug("Invoked PartnerController.deletePartnerGroupByID()");

		try {
				int id = groupID;
				partnerGroupService.deletePartnerGroupByID(id);
				return new ResponseEntity(HttpStatus.NO_CONTENT);
			} catch (Exception ex) {
				logger.error(ex);
				return new ResponseEntity(HttpStatus.FORBIDDEN);
			}


	}
	
	
}
