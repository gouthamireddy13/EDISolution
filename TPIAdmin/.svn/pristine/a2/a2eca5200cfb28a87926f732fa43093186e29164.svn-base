package com.abc.tpi.service;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.transaction.Transactional;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.abc.dashboard.model.SdBusinessService;
import com.abc.dashboard.model.SdBusinessSubUnit;
import com.abc.dashboard.model.SdBusinessUnit;
import com.abc.dashboard.model.SdServiceCategoryDef;
import com.abc.dashboard.model.SdServiceType;
import com.abc.dashboard.model.SdYesNo;
import com.abc.dashboard.service.SdServiceCategoryService;
import com.abc.tpi.common.exceptions.TpiRepositoryException;
import com.abc.tpi.common.exceptions.TpiValidationException;
import com.abc.tpi.model.master.Ack;
import com.abc.tpi.model.master.Delimiter;
import com.abc.tpi.model.master.Direction;
import com.abc.tpi.model.master.Document;
import com.abc.tpi.model.master.PartnerType;
import com.abc.tpi.model.master.Protocol;
import com.abc.tpi.model.master.TpiMap;
import com.abc.tpi.model.master.TppType;
import com.abc.tpi.model.master.Version;
import com.abc.tpi.model.partner.ContactDetail;
import com.abc.tpi.model.partner.Partner;
import com.abc.tpi.model.partner.PartnerGroup;
import com.abc.tpi.model.service.CompanyEnum;
import com.abc.tpi.model.service.PartnerCategoryEnum;
import com.abc.tpi.model.service.ServiceCategory;
import com.abc.tpi.model.service.ServiceType;
import com.abc.tpi.model.tpp.LightWellPartner;
import com.abc.tpi.model.tpp.Tpp;
import com.abc.tpi.model.tpp.Transaction;
import com.abc.tpi.repository.ServiceTypeRepository;
import com.abc.tpi.repository.TpiMapRepository;
import com.abc.tpi.utils.AppConstants;
import com.abc.tpi.utils.SeedDataInsertStatMsg;
import com.abc.tpi.utils.SeedDataRespMsg;
import com.abc.tpi.utils.TPPReturnMsgBean;

/**
 * @author ARINDAMSIKDAR
 *
 */
@Service
public class SeedDataLoadServiceImpl implements SeedDataLoadService {

	private static final Logger logger = LogManager.getLogger(SeedDataLoadServiceImpl.class);

	@Autowired
	SeedDataLoadService seedDataService;

	@Autowired
	MasterDataService masterDataService;

	@Autowired
	PartnerGroupService partnerGroupService;

	@Autowired
	ServiceSubscriptionService serviceSubscriptionService;

	@Autowired
	TpiMapRepository tpiMapRepository;

	@Autowired
	ServiceTypeRepository serviceTypeRepository;

	@Autowired
	com.abc.dashboard.service.SdMasterDataService sdMasterDataService;

	//Added by Arindam Sikdar for Dynamic Data Load process
	@Autowired
	PartnerService partnerService;

	//Added by Arindam Sikdar for Dynamic Data Load process
	@Autowired
	TppService tppService;

	@Autowired
	SdServiceCategoryService sdServiceCategoryService;


	@Override
	public Delimiter getDelimiterFromCsvString(String delimiter) {
		// Delimiter definition expects 2 values: CODE and DESCRIPTION
		Delimiter delim = null;
		List<String> items = Arrays.asList(delimiter.split("\\s*,\\s*"));
		if (items.size() == 6) {
			delim = new Delimiter();
			delim.setDelimiter(items.get(0));
			delim.setDescription(items.get(1));
			delim.setSegment(Boolean.parseBoolean(items.get(2)));
			delim.setElement(Boolean.parseBoolean(items.get(3)));
			delim.setComposite(Boolean.parseBoolean(items.get(4)));
			delim.setRepeat(Boolean.parseBoolean(items.get(5)));

		}
		return delim;
	}

	@Override
	public Ack getAckFromCsvString(String ack) {
		Ack newAck = null;
		List<String> items = Arrays.asList(ack.split("\\s*,\\s*"));
		if (items.size() == 2) {
			newAck = new Ack();
			newAck.setAckValue(items.get(0));
			newAck.setDescription(items.get(1));
		}
		return newAck;
	}

	@Override
	public Direction getDirectionFromCsvString(String direction) {
		Direction newDireciton = null;
		List<String> items = Arrays.asList(direction.split("\\s*,\\s*"));
		if (items.size() == 2) {
			newDireciton = new Direction();
			newDireciton.setDirectionCode(items.get(0));
			newDireciton.setDirectionDescription(items.get(1));
		}
		return newDireciton;
	}

	@Override
	public Document getDocumentFromCsvString(String document) {
		Document newDocument = null;
		List<String> items = Arrays.asList(document.split("\\s*,\\s*"));
		if (items.size() == 2) {
			newDocument = new Document();
			newDocument.setDocumentType(Integer.decode(items.get(0)));
			newDocument.setDocumentDescription(items.get(1));
		}
		return newDocument;
	}

	@Override
	public PartnerType getPartnerTypeFromCsvString(String partnerType) {
		PartnerType newPartnerType = null;
		List<String> items = Arrays.asList(partnerType.split("\\s*,\\s*"));
		if (items.size() == 2) {
			newPartnerType = new PartnerType();
			newPartnerType.setPartnerType(items.get(0));
			newPartnerType.setTypeDescription(items.get(1));
		}
		return newPartnerType;
	}

	@Override
	public Protocol getProtocolFromCcvString(String protocol) {

		Protocol entity = null;
		List<String> items = Arrays.asList(protocol.split("\\s*,\\s*"));
		if (items.size() == 2) {
			entity = new Protocol();
			entity.setProtocolType(items.get(0));
			entity.setProtocolDescription(items.get(1));
		}
		return entity;
	}

	@Override
	public TppType getTppTypeFromCsvString(String tppType) {
		TppType entity = null;
		List<String> items = Arrays.asList(tppType.split("\\s*,\\s*"));
		if (items.size() == 2) {
			entity = new TppType();
			entity.setTypeCode(Short.decode(items.get(0)));
			entity.setDescription(items.get(1));
		}
		return entity;
	}

	@Override
	public Version getVersionFromCsvString(String version) {
		Version entity = null;
		List<String> items = Arrays.asList(version.split("\\s*,\\s*"));
		if (items.size() == 2) {
			entity = new Version();
			entity.setVersionNumber(Integer.decode(items.get(0)));
			entity.setVersionDescription(items.get(1));
		}
		return entity;
	}

	@Override
	public SeedDataRespMsg processSeedDataCSVFile(MultipartFile file, String entityName) throws IOException {

		int counterCreated = 0;
		int counterUpdated = 0;

		//Added by Arindam Sikdar for Dynamic Data Load process - Partner Load
		int counterSkipped = 0;
		SeedDataRespMsg seedDataRespMsg = new SeedDataRespMsg();
		ArrayList<SeedDataInsertStatMsg> seedDataInsertStatMsgList = new ArrayList<SeedDataInsertStatMsg>();


		String message= "Processing " + entityName;
		logger.debug("Prcessing Seed Data");

		seedDataRespMsg.setMessage(message); //Added by Arindam Sikdar for Dynamic Data Load process - Partner Load

		BufferedReader reader = null;

		if (file != null && entityName!=null && !file.isEmpty()) 
		{
			//Added by Arindam Sikdar for Dynamic Data Load process - Partner Load
			logger.debug("File Name: " + file.getOriginalFilename());
			if(file.getOriginalFilename().contains(".xlsx")) {
				logger.debug("Inside DYNAMIC DATA LOAD Loop");

				//FileInputStream excelFile = new FileInputStream(file.getInputStream());
				Workbook workbook = new XSSFWorkbook(file.getInputStream());
				Sheet datatypeSheet = workbook.getSheetAt(0);
				Iterator<Row> iterator = datatypeSheet.iterator();
				String rowLine = null;
				StringBuffer sb = null;
				int lastColNum = 0;
				//int firstColNum = 0;
				boolean isHeaderRow = true;
				while (iterator.hasNext()) {
					rowLine = "";
					sb = new StringBuffer();
					Row currentRow = iterator.next();
					if(isHeaderRow) {
						lastColNum = currentRow.getLastCellNum();
						isHeaderRow = false;
						logger.debug("Skipping Hearder Row Number: " + currentRow.getRowNum());
						continue;
					}
					for(int i=0; i < lastColNum; i++) {
						//Iterator<Cell> cellIterator = currentRow.iterator();
						//while (cellIterator.hasNext()) {
						Cell currentCell = currentRow.getCell(i, Row.RETURN_NULL_AND_BLANK); //cellIterator.next();
						if(currentCell != null) {
							switch(currentCell.getCellType()) 
							{
							case XSSFCell.CELL_TYPE_STRING:
								sb.append(currentCell.getStringCellValue()+",");
								break;
							case XSSFCell.CELL_TYPE_NUMERIC:
								sb.append(new Double(currentCell.getNumericCellValue()).longValue()+",");
								break;
							case XSSFCell.CELL_TYPE_BLANK:
								sb.append(",");
								break;	
							default:
								sb.append(",");
								break;

							}
						} else {
							sb.append(",");
						}

					}
					rowLine = sb.toString();
					logger.debug("RowLine: " + rowLine);

					SeedDataInsertStatMsg seedDataInsertStatMsg = new SeedDataInsertStatMsg();

					String entityNameUpper = entityName.toUpperCase();
					logger.debug("Processing data for : " + entityNameUpper); 

					switch (entityNameUpper) 
					{
					case "PARTNER":  
						seedDataInsertStatMsg = loadPartner(rowLine);
						break;        
					case "TPP":  
						seedDataInsertStatMsg = loadTPP(rowLine);
						int rowNo = currentRow.getRowNum()+1;
						logger.debug("<------------------------------------DEBUG DETAILS:START---------------------------------------------->");
						logger.debug("Row Number: " + rowNo);
						logger.debug("Row Line: " + rowLine);
						logger.debug("Row Status(0-Insert, 1-Update, 2-Skip): " + seedDataInsertStatMsg.getReturnFlag());
						logger.debug("Row Status Message(for 2-Skip): " + seedDataInsertStatMsg.getStatusMsg());
						logger.debug("<------------------------------------DEBUG DETAILS:END---------------------------------------------->");
						break; 
					default:
						break;
					}
					int rowCount = currentRow.getRowNum()+1;
					seedDataInsertStatMsg.setRowNum(rowCount);
					if (seedDataInsertStatMsg.getReturnFlag() == 0)
					{
						counterCreated++;
					}
					else if(seedDataInsertStatMsg.getReturnFlag() == 1)
					{
						counterUpdated++;
					}
					else 
					{
						counterSkipped++;
						seedDataInsertStatMsgList.add(seedDataInsertStatMsg);
					}

				}

			}
			else 
			{
				try 
				{
					reader = new BufferedReader(new InputStreamReader(file.getInputStream()));

					while (reader.ready()) 
					{
						String line = reader.readLine();

						logger.debug(line);
						String entityNameUpper = entityName.toUpperCase();
						logger.debug("Processing data for : " + entityNameUpper); 

						switch (entityNameUpper) 
						{
						case "ACK":  
							if (loadACK(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;
						case "DELIMITER":  
							if (loadDelimiter(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;
						case "DOCUMENT":  
							if (loadDocument(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;
						case "DIRECTION":  
							if (loadDirection(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;
						case "PROTOCOL":  
							if (loadProtocol(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;
						case "TPP TYPE":  
							if (loadTppType(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;
						case "VERSION":  
							if (loadVersion(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;
						case "PARTNER GROUP":  
							if (loadPartnerGroup(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;	
						case "SERVICE TYPE":  
							if (loadServiceType(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;
						case "SERVICE CATEGORY":  
							if (loadServiceCategoryLightWellPartner(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;
						case "MAP":
							if (loadMap(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;
						case "SERVICE TYPE MAP":
							if (loadMapsForServiceCategory(line)!=null)
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;
						case "BUSINESS UNIT":

						{
							if (loadSdBusinessUntiFromString(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
						}
						break;
						case "SD SERVICE CATEGORY LOOKUP":

							try {
								if (loadServiceCategoryDefFromText(line))
								{
									counterCreated++;
								}
								else
								{
									counterUpdated++;
								}
							} catch (TpiValidationException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							break;
						case "SD SERVICE TYPE":

							if (loadSdServiceTypeFromString(line))
							{
								counterCreated++;
							}
							else
							{
								counterUpdated++;
							}
							break;      
						default:
							break;
						}
					}
				}

				finally 
				{
					if (reader != null)
						reader.close();
				}

			} // END of ELSE Loop added by Arindam Sikdar for Dynamic Data Load process - Partner Load
		}
		else
		{
			logger.warn("Invalid file or Entity Name supplied");
		}
		message = "Total created: " + counterCreated + " Total updated: " + counterUpdated + " Total skipped: " + counterSkipped;

		seedDataRespMsg.setMessage(message);
		seedDataRespMsg.setSeedDataInsertStatMsgList(seedDataInsertStatMsgList);
		return seedDataRespMsg;
		//return message;
	}

	private boolean loadMap(String line)
	{
		boolean isNew = true;

		TpiMap map = seedDataService.getMapFromCsvString(line);
		TpiMap existingMap = masterDataService.findMapByName(map.getMapName());
		if (existingMap != null)
		{
			existingMap.setMapName(map.getMapName());
			existingMap.setMapDescription(map.getMapDescription());
			masterDataService.saveMap(existingMap);
			isNew= false;
		}
		else
		{
			masterDataService.saveMap(map);
			isNew = true;
		}
		return isNew;

	}

	private boolean loadVersion(String line) {
		boolean isNew = true;

		Version entity = seedDataService.getVersionFromCsvString(line);
		Version existing = masterDataService.findVersionByVersionNumber(entity.getVersionNumber());

		if (existing != null) 
		{
			existing.setVersionDescription(existing.getVersionDescription());
			masterDataService.saveVersion(existing);
			isNew = false;
		} 
		else 
		{
			masterDataService.saveVersion(entity);
			isNew = true;
		}

		return isNew;
	}

	private boolean loadTppType(String line) {
		boolean isNew = true;

		TppType entity = seedDataService.getTppTypeFromCsvString(line);
		TppType existing = masterDataService.findTppTypeByTypeCode(entity.getTypeCode());

		if (existing != null) 
		{
			existing.setDescription(existing.getDescription());
			masterDataService.saveTppType(existing);
			isNew = false;
		} 
		else 
		{
			masterDataService.saveTppType(entity);
			isNew = true;
		}

		return isNew;
	}

	private boolean loadDelimiter(String delimiterEntry)
	{
		boolean isNew = true;

		Delimiter delimiter = seedDataService.getDelimiterFromCsvString(delimiterEntry);
		Delimiter existing = masterDataService.findDelimiterByCode(delimiter.getDelimiter());

		if (existing != null) 
		{
			existing.setDescription(delimiter.getDescription());
			existing.setComposite(delimiter.isComposite());
			existing.setElement(delimiter.isElement());
			existing.setComposite(delimiter.isComposite());
			masterDataService.saveDelimiter(existing);
			isNew = false;
		} 
		else 
		{
			masterDataService.saveDelimiter(delimiter);
			isNew = true;
		}

		return isNew;
	}

	private boolean loadACK(String ackEntry)
	{
		boolean isNew = true;

		Ack ack = seedDataService.getAckFromCsvString(ackEntry);
		Ack existing = masterDataService.findAckByCode(ack.getAckValue());

		if (existing != null) 
		{
			existing.setDescription(existing.getDescription());
			masterDataService.saveAck(existing);
			isNew = false;
		} 
		else 
		{
			masterDataService.saveAck(ack);
			isNew = true;
		}

		return isNew;
	}

	private boolean loadDocument(String documentString)
	{
		boolean isNew = true;

		Document document = seedDataService.getDocumentFromCsvString(documentString);
		Document existing = masterDataService.findDocumentTypeByDocumentType(document.getDocumentType());

		if (existing != null) 
		{
			existing.setDocumentDescription(existing.getDocumentDescription());
			masterDataService.saveDocument(existing);
			isNew = false;
		} 
		else 
		{
			masterDataService.saveDocument(document);
			isNew = true;
		}

		return isNew;
	}

	private boolean loadDirection(String line)
	{
		boolean isNew = true;

		Direction entity = seedDataService.getDirectionFromCsvString(line);
		Direction existing = masterDataService.findDirectionByName(entity.getDirectionCode());

		if (existing != null) 
		{
			existing.setDirectionDescription(existing.getDirectionDescription());
			masterDataService.saveDirection(existing);
			isNew = false;
		} 
		else 
		{
			masterDataService.saveDirection(entity);
			isNew = true;
		}

		return isNew;
	}

	private boolean loadProtocol(String line)
	{
		boolean isNew = true;

		Protocol entity = seedDataService.getProtocolFromCcvString(line);
		Protocol existing = masterDataService.findProtocolByProtocolType(entity.getProtocolType());

		if (existing != null) 
		{
			existing.setProtocolDescription(existing.getProtocolDescription());
			masterDataService.saveProtocol(existing);
			isNew = false;
		}
		else 
		{
			masterDataService.saveProtocol(entity);
			isNew = true;
		}

		return isNew;
	}

	//Added by Arindam Sikdar for Dynamic Data Load process
	private boolean loadContactDetail(String line) {
		boolean isNew = true;
		ContactDetail contactDetail = seedDataService.getContactDetailFromCsvString(line);
		partnerService.insertContactDetail(contactDetail);

		return isNew;
	}

	//Added by Arindam Sikdar for Dynamic Data Load process - Partner Load
	private SeedDataInsertStatMsg loadPartner(String line) {
		int returnFlag = 0; //0 - INSERT, 1 - UPDATE, 2 - ERROR
		SeedDataInsertStatMsg seedDataInsertStatMsg = new SeedDataInsertStatMsg();
		String validationStatus = validatePartnerString(line);
		if(validationStatus.length() == 0) {
			Partner partner = seedDataService.getPartnerFromXlsxString(line);
			Partner result = null;		
			if(partner != null && partner.getPartnerName() != AppConstants.errorCode01 && partner.getPartnerName() != AppConstants.errorCode10 ) {
				if(!partnerService.isPartnerExist(partner.getPartnerName())) {
					try {

						result = partnerService.createPartner(partner);
					} catch (TpiRepositoryException e) {
						// TODO Auto-generated catch block
						logger.error(AppConstants.errorCode02, e);
						returnFlag = 2;
						seedDataInsertStatMsg.setStatusMsg(AppConstants.errorCode02);
						e.printStackTrace();
					}
				}else {
					Partner existingPartner = partnerService.findPartnerByUniqueName(partner.getPartnerName());
					Set<ContactDetail> set = partner.getContactDetails();
					for (ContactDetail s : set) {
						partnerService.insertContactDetail(s);
						existingPartner.addContact(s);
					}
					existingPartner.setPartnerGroup(partner.getPartnerGroup());
					result = partnerService.updatePartner(existingPartner);
					returnFlag = 1;
				}
			} else {
				returnFlag = 2;
				if(partner != null && partner.getPartnerName() == AppConstants.errorCode01) {
					seedDataInsertStatMsg.setStatusMsg(AppConstants.errorCode01);
				}
				if(partner != null && partner.getPartnerName() == AppConstants.errorCode10) {
					seedDataInsertStatMsg.setStatusMsg(AppConstants.errorCode10);
				}
			}
		} else {
			returnFlag = 2;
			seedDataInsertStatMsg.setStatusMsg(validationStatus);
		}

		seedDataInsertStatMsg.setReturnFlag(returnFlag);
		return seedDataInsertStatMsg;
	}

	private String validatePartnerString(String partnerString) {
		String validationStatus = "";
		StringBuffer sb = new StringBuffer("");
		List<String> items = Arrays.asList(partnerString.split("\\s*,\\s*"));
		//logger.debug("Item Size: " + items.size());
		if(items.size() == 17) {
			/*			for(int i=0;i < 17;i++) {
				logger.debug("Item"+i+": "+ items.get(i));
				logger.debug("Item Size"+i+": "+ items.get(i).length());
			}*/
			if(items.get(0) == null || items.get(0).trim().length() == 0) {
				logger.error(AppConstants.errorCode04);
				sb.append(AppConstants.errorCode04);
			}
			if(items.get(1) == null || items.get(1).trim().length() == 0) {
				logger.error(AppConstants.errorCode05);
				sb.append(AppConstants.errorCode05);
			}
			if(items.get(2) == null || items.get(2).trim().length() == 0) {
				logger.error(AppConstants.errorCode06);
				sb.append(AppConstants.errorCode06);
			}
			if(items.get(3) == null || items.get(3).trim().length() == 0) {
				logger.error(AppConstants.errorCode07);
				sb.append(AppConstants.errorCode07);
			}
			if(items.get(14) == null || items.get(14).trim().length() == 0) {
				logger.error(AppConstants.errorCode08);
				sb.append(AppConstants.errorCode08);
			}
			if(items.get(16) == null || items.get(16).trim().length() == 0) {
				logger.error(AppConstants.errorCode09);
				sb.append(AppConstants.errorCode09);
			}

		}else {
			logger.error(AppConstants.errorCode03);
			sb.append(AppConstants.errorCode03);
		}

		validationStatus = sb.toString();
		//logger.debug("Validation Status: " + validationStatus);
		return validationStatus;
	}

	//Added by Arindam Sikdar for Dynamic Data Load process - TPP Load
	private SeedDataInsertStatMsg loadTPP(String line) {
		int returnFlag = 0; //0 - INSERT, 1 - UPDATE, 2 - ERROR
		SeedDataInsertStatMsg seedDataInsertStatMsg = new SeedDataInsertStatMsg();
		TPPReturnMsgBean tppReturnMsgBean = seedDataService.getTPPFromXlsxString(line);
		Tpp tpp = null;
		Tpp result = null;	
		if(tppReturnMsgBean.getTpp() == null) {
			seedDataInsertStatMsg.setReturnFlag(2);
			seedDataInsertStatMsg.setStatusMsg(tppReturnMsgBean.getReturnMsg());
		} else {
			seedDataInsertStatMsg.setReturnFlag(tppReturnMsgBean.getReturnFlag());
		}
		return seedDataInsertStatMsg;
	}

	//Added by Arindam Sikdar for Dynamic Data Load process - TPP Load
	private String validateTPPString(String tppString) {
		String validationStatus = "";
		StringBuffer sb = new StringBuffer("");
		List<String> items = Arrays.asList(tppString.split("\\s*,\\s*", -1));	
		//List<String> items = Arrays.asList(tppString.split(","));	
		if(items.get(8) == null || items.get(8).trim().length() == 0) {
			sb.append(AppConstants.errorCode13);
		} else if(items.get(13) == null || items.get(13).trim().length() == 0) {
			sb.append(AppConstants.errorCode21);
		} else if(items.get(14) == null || items.get(14).trim().length() == 0) {
			sb.append(AppConstants.errorCode22);
		} else if(items.get(15) == null || items.get(15).trim().length() == 0) {
			sb.append(AppConstants.errorCode23);
		} else if(items.get(16) == null || items.get(16).trim().length() == 0) {
			sb.append(AppConstants.errorCode24);
		} else if(items.get(17) == null || items.get(17).trim().length() == 0) {
			sb.append(AppConstants.errorCode25);
		} else if(items.get(18) == null || items.get(18).trim().length() == 0) {
			sb.append(AppConstants.errorCode26);
		} else if(items.get(20) == null || items.get(20).trim().length() == 0) {
			sb.append(AppConstants.errorCode27);
		} else if(items.get(31) == null || items.get(31).trim().length() == 0) {
			sb.append(AppConstants.errorCode08);
		} else if(items.get(33) == null || items.get(33).trim().length() == 0) {
			sb.append(AppConstants.errorCode09);
		} 



		validationStatus = sb.toString();
		//logger.debug("Validation Status: " + validationStatus);
		return validationStatus;
	}

	//Added by Arindam Sikdar for Dynamic Data Load process - TPP Load

	/*	3PP Template Details
	----------------------------
	Col	Header
  	0	3PP NAME	
	1	3PP TYPE CODE
	2	TEST ISA ID	
	3	TEST ISA QUAL	
	4	TEST GS ID	
	5	PROD ISA ID	
	6	PROD ISA QUAL	
	7	PROD GS ID	
	8	PROTOCOL#1	
	9	PROTOCOL#2	
	10	PROTOCOL#3	
	11	PROTOCOL#4	
	12	PROTOCOL#5	
	13	TRANSACTION DIRECTION	
	14	TRANSACTION TYPE	
	15	TRANSACTION VERSION	
	16	SEGMENT DELIMITER	
	17	ELEMENT DELIMITER	
	18	COMPOSITE DELIMITER	
	19	REPEAT DELIMITER	
	20	CONTACT NAME	
	21	TITLE	
	22	BUSINESS COUNTRY	
	23	BUSINESS PHONE	
	24	BUSINESS EXT	
	25	MOBILE COUNTRY	
	26	MOBILE PHONE	
	27	MOBILE EXT	
	28	PERSONAL COUNTRY	
	29	PERSONAL PHONE	
	30	PERSONAL EXT	
	31	Primary Email	
	32	Secondary Email	
	33	Transaction Type
	 */

	@Override
	public TPPReturnMsgBean getTPPFromXlsxString(String tppString) {
		TPPReturnMsgBean tppReturnMsgBean1 = new TPPReturnMsgBean();
		tppReturnMsgBean1.setReturnMsg("");
		tppReturnMsgBean1.setReturnFlag(2);
		Tpp tpp = null;

		List<String> items = Arrays.asList(tppString.split("\\s*,\\s*",-1));
		//List<String> items = Arrays.asList(tppString.split(","));	
		logger.debug("Inside getTPPFromXlsxString() method.");
		logger.debug("Column Size: " + items.size());
		if(items.size() == 35) {
			if(items.get(0) == null || items.get(0).trim().length() == 0) {
				tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode11);
				logger.error(AppConstants.errorCode11);
				return tppReturnMsgBean1;
			} 
			if(items.get(1) == null || items.get(1).trim().length() == 0) {
				tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode12);
				logger.error(AppConstants.errorCode12);
				return tppReturnMsgBean1;
			} 
			if(items.get(19) != null && items.get(19).trim().length() != 0) {
				if(items.get(16) != null&& items.get(16).trim().length() != 0 && items.get(17) != null&& items.get(17).trim().length() != 0 && items.get(18) != null&& items.get(18).trim().length() != 0) {
					if((items.get(16).trim().equals(items.get(17).trim())) || (items.get(16).trim().equals(items.get(18).trim())) || (items.get(16).trim().equals(items.get(19).trim())) ) {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode29);
						return tppReturnMsgBean1;
					} else if((items.get(17).trim().equals(items.get(18).trim())) || (items.get(17).trim().equals(items.get(19).trim()))) {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode29);
						return tppReturnMsgBean1;
					} else if((items.get(18).trim().equals(items.get(19).trim()))) {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode29);
						return tppReturnMsgBean1;
					}

				} 
			} else {
				if(items.get(16) != null && items.get(16).trim().length() != 0 && items.get(17) != null && items.get(17).trim().length() != 0 && items.get(18) != null && items.get(18).trim().length() != 0) {
					if((items.get(16).trim().equals(items.get(17).trim())) || (items.get(16).trim().equals(items.get(18).trim())) || (items.get(17).trim().equals(items.get(18).trim())) ) {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode29);
						return tppReturnMsgBean1;
					}

				} 
			}
			if(Integer.parseInt(items.get(1)) != 3) { //TPPType vs Protocols validation
				for(int k=9; k<=12 ; k++) {
					if(items.get(k) != null && items.get(k).trim().length() != 0) {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode30);
						return tppReturnMsgBean1;
					}
				}
			} 
			if(Integer.parseInt(items.get(1)) != 1) { //TPPType vs ISA, GS Ids
				for(int k=2; k<=7 ; k++) {
					if(items.get(k) != null && items.get(k).trim().length() != 0) {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode37);
						return tppReturnMsgBean1;
					}
				}
			} 
			//else {
			tpp = tppService.findByNameFullStringMatchIgnoreCase(items.get(0));
			if(tpp == null) {
				//new insert
				String validationStatus = validateTPPString(tppString);
				if(validationStatus != null && validationStatus.length() != 0) {
					tppReturnMsgBean1.setReturnMsg(validationStatus);
					return tppReturnMsgBean1;
				}

				//Type Insert
				//========================================================================================
				logger.debug("Inside TPP Insert Process");
				tpp = new Tpp();
				tpp.setName(items.get(0).trim());
				List<TppType> tppTypes = masterDataService.findAllTppTypes();
				Iterator<TppType> itr = tppTypes.iterator();
				TppType tppType = null;
				while(itr.hasNext()) {
					tppType = itr.next();

					if(tppType.getTypeCode() == Short.valueOf(items.get(1).trim())) {
						tpp.setType(tppType);
					}
				}
				if(tpp.getType().getTypeCode() == 2 || tpp.getType().getTypeCode() == 3) {
					tpp.setLightWellPartner(null);
				} else {
					if(items.get(2) == null || items.get(2).trim().length() == 0) {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode14);
						logger.error(AppConstants.errorCode14);
						return tppReturnMsgBean1;
					} else if(items.get(3) == null || items.get(3).trim().length() == 0)  {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode15);
						logger.error(AppConstants.errorCode15);
						return tppReturnMsgBean1;
					} else if(items.get(4) == null || items.get(4).trim().length() == 0)  {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode16);
						logger.error(AppConstants.errorCode16);
						return tppReturnMsgBean1;
					} else if(items.get(5) == null || items.get(5).trim().length() == 0)  {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode17);
						logger.error(AppConstants.errorCode17);
						return tppReturnMsgBean1;
					} else if(items.get(6) == null || items.get(6).trim().length() == 0)  {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode18);
						logger.error(AppConstants.errorCode18);
						return tppReturnMsgBean1;
					} else if(items.get(7) == null || items.get(7).trim().length() == 0)  {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode19);
						logger.error(AppConstants.errorCode19);
						return tppReturnMsgBean1;
					} else {
						List<Long> tppsForLWInsert = tppService.getTppsForAbcId(items.get(2), items.get(4), items.get(5), items.get(7));
						if (tppsForLWInsert ==null || tppsForLWInsert.isEmpty())
						{
							//do nothing
						}
						else
						{
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode35);
							logger.error(AppConstants.errorCode35);
							return tppReturnMsgBean1;
						}
						LightWellPartner lwPartner = seedDataService.getLightWellPartnerFromCsvString("0,"+items.get(2)+","+items.get(3)+","+items.get(4)+","+items.get(5)+","+items.get(6)+","+items.get(7)+","+"ABC_S_ABDC,1,Dataload,");
						if(lwPartner != null) {									
							tpp.setLightWellPartner(lwPartner);
						} else {
							tppReturnMsgBean1.setReturnMsg("Error during LW Partner Object creation.");
							logger.error("Error during LW Partner Object creation.");
							return tppReturnMsgBean1;
						}						


					}
				}

				//========================================================================================
				//Protocol Insert
				//========================================================================================
				if(Integer.parseInt(items.get(1)) == 3) {
					for(int i=8; i<=12; i++) {
						if(items.get(i) != null && items.get(i).trim().length() != 0){
							Protocol pNew = masterDataService.findProtocolByProtocolType(items.get(i));
							if(pNew == null) {
								tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode20);
								logger.error(AppConstants.errorCode20);
								return tppReturnMsgBean1;
							}
							tpp.addProtocol(pNew);						
						}
					}
				} else {
					for(int n=9;n<=12;n++) {
						if(items.get(n) != null && items.get(n).trim().length() != 0) {
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode30);
							logger.error(AppConstants.errorCode30);
							return tppReturnMsgBean1;
						}
					}
					Protocol pNew = masterDataService.findProtocolByProtocolType(items.get(8));
					if(pNew == null) {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode20);
						logger.error(AppConstants.errorCode20);
						return tppReturnMsgBean1;
					}
					tpp.addProtocol(pNew);	
				}


				//========================================================================================
				//Transaction Insert
				//========================================================================================
				Direction direction = masterDataService.findDirectionByName(items.get(13).trim());
				if(direction == null) {
					tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode24);
					logger.error(AppConstants.errorCode24);
					return tppReturnMsgBean1;
				}
				Document document = masterDataService.findDocumentTypeByDocumentType(Integer.parseInt(items.get(14).trim()));
				if(document == null) {
					tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode25);
					logger.error(AppConstants.errorCode25);
					return tppReturnMsgBean1;
				}
				Version version = masterDataService.findVersionByVersionNumber(Integer.parseInt(items.get(15).trim()));
				if(version == null) {
					tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode26);
					logger.error(AppConstants.errorCode26);
					return tppReturnMsgBean1;
				}
				Transaction transaction = new Transaction();
				transaction.setDirection(direction);
				transaction.setDocument(document);
				transaction.setVersion(version);
				tpp.addTransaction(transaction);
				//========================================================================================
				//Delimiter values insert
				//========================================================================================												

				List<Delimiter> segmentDelimiters = masterDataService.getSegmentDelimiters();
				Iterator<Delimiter> itr1 = segmentDelimiters.iterator();
				while(itr1.hasNext()) {
					Delimiter delim = itr1.next();
					if(delim.getDelimiter().equals(items.get(16).trim())) {
						tpp.setSegmentDelimiter(delim);
					}
				}							

				List<Delimiter> elementDelimiters = masterDataService.getElementDelimiters();
				Iterator<Delimiter> itr2 = elementDelimiters.iterator();
				while(itr2.hasNext()) {
					Delimiter delim = itr2.next();
					if(delim.getDelimiter().equals(items.get(17).trim())) {
						tpp.setElementDelimiter(delim);
					}
				}						

				List<Delimiter> compositeElementDelimiters = masterDataService.getCompositeDelimiters();
				Iterator<Delimiter> itr3 = compositeElementDelimiters.iterator();
				while(itr3.hasNext()) {
					Delimiter delim = itr3.next();
					if(delim.getDelimiter().equals(items.get(18).trim())) {
						tpp.setCompositeElementDelimiter(delim);
					}
				}						

				List<Delimiter> repeatDelimiters = masterDataService.getRepeatDeleimiters();
				Iterator<Delimiter> itr4 = repeatDelimiters.iterator();
				while(itr4.hasNext()) {
					Delimiter delim = itr4.next();
					if(delim.getDelimiter().equals(items.get(19).trim())) {
						tpp.setRepeatDelimiter(delim);
					}
				}						

				//========================================================================================
				//ContactDetails Insert
				//========================================================================================
				ContactDetail contactDetail = seedDataService.getContactDetailFromCsvString(items.get(20)+","+items.get(21)+","+items.get(22)+","+items.get(23)+","+items.get(24)+","+items.get(25)+","+items.get(26)+","+items.get(27)+","+items.get(28)+","+items.get(29)+","+items.get(30)+","+items.get(31)+","+items.get(32)+","+items.get(33)+",");
				tpp.addContact(contactDetail);					
				//========================================================================================
				tppReturnMsgBean1.setTpp(tppService.saveTpp(tpp));
				tppReturnMsgBean1.setReturnFlag(0);

			} else {
				//update
				logger.debug("Inside TPP Update Process");
				//check if any change in type
				//========================================================================================
				if(tpp.getType().getTypeCode() != Integer.parseInt(items.get(1).trim())) {
					List<TppType> tppTypes = masterDataService.findAllTppTypes();
					Iterator<TppType> itr = tppTypes.iterator();
					TppType tppType = null;
					while(itr.hasNext()) {
						tppType = itr.next();
						if(tppType.getTypeCode() == Short.valueOf(items.get(1).trim())) {
							tpp.setType(tppType);
						}
					}
					if(tpp.getType().getTypeCode() == 2 || tpp.getType().getTypeCode() == 3) {
						tpp.setLightWellPartner(null);
					} else {
						if(items.get(2) == null || items.get(2).trim().length() == 0) {
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode14);
							logger.error(AppConstants.errorCode14);
							return tppReturnMsgBean1;
						} else if(items.get(3) == null || items.get(3).trim().length() == 0)  {
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode15);
							logger.error(AppConstants.errorCode15);
							return tppReturnMsgBean1;
						} else if(items.get(4) == null || items.get(4).trim().length() == 0)  {
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode16);
							logger.error(AppConstants.errorCode16);
							return tppReturnMsgBean1;
						} else if(items.get(5) == null || items.get(5).trim().length() == 0)  {
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode17);
							logger.error(AppConstants.errorCode17);
							return tppReturnMsgBean1;
						} else if(items.get(6) == null || items.get(6).trim().length() == 0)  {
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode18);
							logger.error(AppConstants.errorCode18);
							return tppReturnMsgBean1;
						} else if(items.get(7) == null || items.get(7).trim().length() == 0)  {
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode19);
							logger.error(AppConstants.errorCode19);
							return tppReturnMsgBean1;
						} else {
							List<Long> tppsForLW = tppService.getTppsForAbcId(items.get(2), items.get(4), items.get(5), items.get(7));
							if (tppsForLW ==null || tppsForLW.isEmpty())
							{
								//do nothing
							}
							else
							{
								tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode35);
								logger.error(AppConstants.errorCode35);
								return tppReturnMsgBean1;
							}	

							LightWellPartner lwPartner = seedDataService.getLightWellPartnerFromCsvString("0,"+items.get(2)+","+items.get(3)+","+items.get(4)+","+items.get(5)+","+items.get(6)+","+items.get(7)+","+"ABC_S_ABDC,1,Dataload,");
							if(lwPartner != null) {									
								tpp.setLightWellPartner(lwPartner);
							} else {
								tppReturnMsgBean1.setReturnMsg("Error during LW Partner Object creation.");
								logger.error("Error during LW Partner Object creation.");
								return tppReturnMsgBean1;
							}						


						}
					}
				} else { //check if ISA , GS IDs are same or not
					if(tpp.getType().getTypeCode() == 1 ) {
						int emptyColCount = 0;
						for(int p = 2; p<=7 ; p++) {
							if(items.get(p) == null || items.get(p).trim().length() == 0) {
								emptyColCount++;
							} 
						}
						if(emptyColCount != 0 && emptyColCount != 6) {
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode36);
							logger.error(AppConstants.errorCode36);
							return tppReturnMsgBean1;
						}

						if(emptyColCount == 0) {
							List<Long> tppsForLWInsert = tppService.getTppsForAbcId(items.get(2), items.get(4), items.get(5), items.get(7));
							if (tppsForLWInsert ==null || tppsForLWInsert.isEmpty())
							{
								//do nothing
							}
							else
							{
								if(tppsForLWInsert.size() > 1) {
									tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode35);
									logger.error(AppConstants.errorCode35);
									return tppReturnMsgBean1;
								} else {
									if(tpp.getLightWellPartner().getTestIsaID().equalsIgnoreCase(items.get(2)) && tpp.getLightWellPartner().getTestGsId().equalsIgnoreCase(items.get(4)) && tpp.getLightWellPartner().getProductionIsaID().equalsIgnoreCase(items.get(5)) && tpp.getLightWellPartner().getProductionGsId().equalsIgnoreCase(items.get(7)) && (!tpp.getLightWellPartner().getTestIsaQualifier().equalsIgnoreCase(items.get(3)) || !tpp.getLightWellPartner().getProductionIsaQualifier().equalsIgnoreCase(items.get(6)))) {
										if(!tpp.getLightWellPartner().getTestIsaQualifier().equalsIgnoreCase(items.get(3)) ) {
											tpp.getLightWellPartner().setTestIsaQualifier(items.get(3).trim());
										}
										if(!tpp.getLightWellPartner().getProductionIsaQualifier().equalsIgnoreCase(items.get(6)) ) {
											tpp.getLightWellPartner().setProductionIsaQualifier(items.get(6).trim());
										}
									} else {
										LightWellPartner lwPartner = seedDataService.getLightWellPartnerFromCsvString("0,"+items.get(2)+","+items.get(3)+","+items.get(4)+","+items.get(5)+","+items.get(6)+","+items.get(7)+","+"ABC_S_ABDC,1,Dataload,");
										if(lwPartner != null) {									
											tpp.setLightWellPartner(lwPartner);
										} else {
											tppReturnMsgBean1.setReturnMsg("Error during LW Partner Object creation.");
											logger.error("Error during LW Partner Object creation.");
											return tppReturnMsgBean1;
										}
									}
								}
							}
						}

					}

				}
				//========================================================================================

				//check if any change in protocols
				//========================================================================================
				if(items.get(8) != null && items.get(8).trim().length() != 0) {
					Set<Protocol> protocols = tpp.getProtocols();
					HashSet<Protocol> newProtocols = new HashSet<Protocol>();
					//if(tpp.getType().getTypeCode() == 3) {
					if(tpp.getType().getTypeCode().compareTo(new Short("3")) == 0) {
						for(int j=8;j<= 12;j++) {
							if(items.get(j) != null && items.get(j).trim().length() != 0) {
								Protocol pNew = masterDataService.findProtocolByProtocolType(items.get(j));
								if(pNew == null) {
									tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode20);
									logger.error(AppConstants.errorCode20);
									return tppReturnMsgBean1;
								}
								newProtocols.add(pNew);
							}
						}
						tpp.setProtocols(newProtocols);
					} else {
						for(int n=9;n<=12;n++) {
							if(items.get(n) != null && items.get(n).trim().length() != 0) {
								tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode30);
								logger.error(AppConstants.errorCode30);
								return tppReturnMsgBean1;
							}
						}
						boolean isPresent = false;
						for(Protocol p : protocols) {
							if(p.getProtocolType().equalsIgnoreCase(items.get(8))) {							
								isPresent = true;
							}
						}
						if(!isPresent) {
							Protocol pNew = masterDataService.findProtocolByProtocolType(items.get(8));
							if(pNew == null) {
								tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode20);
								logger.error(AppConstants.errorCode20);
								return tppReturnMsgBean1;
							}
							//protocols = new HashSet<Protocol>();
							newProtocols.add(pNew);
							tpp.setProtocols(newProtocols);
							//tpp.addProtocol(pNew);						
						}
					}
				}
				//========================================================================================

				//transaction
				//========================================================================================					
				StringBuffer sb = new StringBuffer("");
				int i = 0;
				if(items.get(13) == null || items.get(13).trim().length() == 0) {						
					sb.append(AppConstants.errorCode21);
					i++;
					//logger.error(AppConstants.errorCode21);
				} 
				if(items.get(14) == null || items.get(14).trim().length() == 0) {						
					sb.append(AppConstants.errorCode22);
					i++;
				} 
				if(items.get(15) == null || items.get(15).trim().length() == 0) {						
					sb.append(AppConstants.errorCode23);
					i++;
				}					
				if(i == 1 || i == 2) {
					tppReturnMsgBean1.setReturnMsg(sb.toString());
					logger.error(sb.toString());
					return tppReturnMsgBean1;
				}
				if(i == 0) {
					Direction direction = masterDataService.findDirectionByName(items.get(13).trim());
					if(direction == null) {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode24);
						logger.error(AppConstants.errorCode24);
						return tppReturnMsgBean1;
					}
					Document document = masterDataService.findDocumentTypeByDocumentType(Integer.parseInt(items.get(14).trim()));
					if(document == null) {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode25);
						logger.error(AppConstants.errorCode25);
						return tppReturnMsgBean1;
					}
					Version version = masterDataService.findVersionByVersionNumber(Integer.parseInt(items.get(15).trim()));
					if(version == null) {
						tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode26);
						logger.error(AppConstants.errorCode26);
						return tppReturnMsgBean1;
					}
					Transaction transaction = new Transaction();
					transaction.setDirection(direction);
					transaction.setDocument(document);
					transaction.setVersion(version);
					Set<Transaction> transactions = tpp.getTransactions();
					if(transactions != null) {
						Iterator<Transaction> transactionItr = transactions.iterator();
						Transaction existingTransaction = null;
						while(transactionItr.hasNext()) {
							existingTransaction = transactionItr.next();
							if((existingTransaction.getDirection().getId() == direction.getId()) && (existingTransaction.getDocument().getId() == document.getId()) && (existingTransaction.getVersion().getId() == version.getId())) {
								logger.error(AppConstants.errorCode28);
								tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode28);
								return tppReturnMsgBean1;
							} else {
								tpp.addTransaction(transaction);
							}
						}
					}
				}
				//========================================================================================

				//Delimiter values
				//========================================================================================
				int delimCount = 0;
				for(int o=16; o<=18; o++) {
					if(items.get(o) != null && items.get(o).trim().length() != 0) {
						delimCount++;
					}
				}
				if(delimCount == 0 && items.get(19) != null && items.get(19).trim().length() != 0) {
					logger.error(AppConstants.errorCode38);
					tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode38);
					return tppReturnMsgBean1;
				}
				if(delimCount > 0 && delimCount < 3) {
					logger.error(AppConstants.errorCode38);
					tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode38);
					return tppReturnMsgBean1;					
				}
				if(items.get(16) != null && items.get(16).trim().length() != 0) {						
					if(!(tpp.getSegmentDelimiter().getDelimiter()).equals(items.get(16).trim())) {
						/*						if(tpp.getElementDelimiter().getDelimiter().equals(items.get(16).trim()) || tpp.getCompositeElementDelimiter().getDelimiter().equals(items.get(16).trim()) || tpp.getRepeatDelimiter().getDelimiter().equals(items.get(16).trim())) {
							logger.error(AppConstants.errorCode29);
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode29);
							return tppReturnMsgBean1;
						} else {*/
						List<Delimiter> segmentDelimiters = masterDataService.getSegmentDelimiters();
						Iterator<Delimiter> itr = segmentDelimiters.iterator();
						boolean isIncorrectSegDelim = true;
						while(itr.hasNext()) {
							Delimiter delim = itr.next();
							if(delim.getDelimiter().equals(items.get(16).trim())) {
								tpp.setSegmentDelimiter(delim);
								isIncorrectSegDelim = false;
							}
						}			
						if(isIncorrectSegDelim) {
							logger.error(AppConstants.errorCode31);
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode31);
							return tppReturnMsgBean1;
						}
						//}
					}
				}

				if(items.get(17) != null && items.get(17).trim().length() != 0) {						
					if(!(tpp.getElementDelimiter().getDelimiter()).equals(items.get(17).trim())) {
						/*						if(tpp.getSegmentDelimiter().getDelimiter().equals(items.get(17).trim()) || tpp.getCompositeElementDelimiter().getDelimiter().equals(items.get(17).trim()) || tpp.getRepeatDelimiter().getDelimiter().equals(items.get(17).trim())) {
							logger.error(AppConstants.errorCode29);
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode29);
							return tppReturnMsgBean1;
						} else {*/
						List<Delimiter> elementDelimiters = masterDataService.getElementDelimiters();
						Iterator<Delimiter> itr = elementDelimiters.iterator();
						boolean isIncorrectElemDelim = true;
						while(itr.hasNext()) {
							Delimiter delim = itr.next();
							if(delim.getDelimiter().equals(items.get(17).trim())) {
								tpp.setElementDelimiter(delim);
								isIncorrectElemDelim = false;
							}
						}
						if(isIncorrectElemDelim) {
							logger.error(AppConstants.errorCode32);
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode32);
							return tppReturnMsgBean1;								
						}
						//}
					}
				}

				if(items.get(18) != null && items.get(18).trim().length() != 0) {						
					if(!(tpp.getCompositeElementDelimiter().getDelimiter()).equals(items.get(18).trim())) {
						/*						if(tpp.getElementDelimiter().getDelimiter().equals(items.get(18).trim()) || tpp.getRepeatDelimiter().getDelimiter().equals(items.get(18).trim()) || tpp.getSegmentDelimiter().getDelimiter().equals(items.get(18).trim())) {
							logger.error(AppConstants.errorCode29);
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode29);
							return tppReturnMsgBean1;
						} else {*/
						List<Delimiter> compositeElementDelimiters = masterDataService.getCompositeDelimiters();
						Iterator<Delimiter> itr = compositeElementDelimiters.iterator();
						boolean isIncorrectCompDelim = true;
						while(itr.hasNext()) {
							Delimiter delim = itr.next();
							if(delim.getDelimiter().equals(items.get(18).trim())) {
								tpp.setCompositeElementDelimiter(delim);
								isIncorrectCompDelim = false;
							}
						}
						if(isIncorrectCompDelim) {
							logger.error(AppConstants.errorCode33);
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode33);
							return tppReturnMsgBean1;									
						}
						//}
					}
				}

				if(items.get(19) != null && items.get(19).trim().length() != 0) {
					if(!(tpp.getRepeatDelimiter().getDelimiter()).equals(items.get(19).trim())) {
						/*						if(tpp.getCompositeElementDelimiter().getDelimiter().equals(items.get(19).trim()) || tpp.getElementDelimiter().getDelimiter().equals(items.get(19).trim()) || tpp.getSegmentDelimiter().getDelimiter().equals(items.get(19).trim())) {
							logger.error(AppConstants.errorCode29);
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode29);
							return tppReturnMsgBean1;
						} else {*/
						List<Delimiter> repeatDelimiters = masterDataService.getRepeatDeleimiters();
						Iterator<Delimiter> itr = repeatDelimiters.iterator();
						boolean isIncorrectRepeatDelim = true;
						while(itr.hasNext()) {
							Delimiter delim = itr.next();
							if(delim.getDelimiter().equals(items.get(19).trim())) {
								tpp.setRepeatDelimiter(delim);
								isIncorrectRepeatDelim = false;
							}
						}
						if(isIncorrectRepeatDelim) {
							logger.error(AppConstants.errorCode34);
							tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode34);
							return tppReturnMsgBean1;										
						}
						//}
					} 
				} else if((items.get(19) == null || items.get(19).trim().length() == 0) && delimCount == 3) {
					tpp.setRepeatDelimiter(null);
				}
				//========================================================================================

				//ContactDetails
				//========================================================================================
				boolean isEmptyContact = false;
				StringBuffer sbMsg = new StringBuffer("");
				int j = 0;
				if(items.get(20) == null || items.get(20).trim().length() == 0) {
					j++;
					sbMsg.append(AppConstants.errorCode27);
					//logger.error(AppConstants.errorCode21);
				} 
				if(items.get(31) == null || items.get(31).trim().length() == 0) {
					j++;
					sbMsg.append(AppConstants.errorCode08);
				} 
				if(items.get(33) == null || items.get(33).trim().length() == 0) {
					j++;
					sbMsg.append(AppConstants.errorCode09);
				}					
				if(j == 1 || j == 2) {
					tppReturnMsgBean1.setReturnMsg(sbMsg.toString());
					logger.error(sbMsg.toString());
					return tppReturnMsgBean1;
				}
				if(j == 0) {
					ContactDetail contactDetail = seedDataService.getContactDetailFromCsvString(items.get(20)+","+items.get(21)+","+items.get(22)+","+items.get(23)+","+items.get(24)+","+items.get(25)+","+items.get(26)+","+items.get(27)+","+items.get(28)+","+items.get(29)+","+items.get(30)+","+items.get(31)+","+items.get(32)+","+items.get(33)+",");
					tpp.addContact(contactDetail);
				} 

				if(j == 3) {
					for(int m = 21; m <= 30 ; m++) {
						if(items.get(m) != null && items.get(m).trim().length() != 0) {
							tppReturnMsgBean1.setReturnMsg(sbMsg.toString());
							logger.error(sbMsg.toString());
							return tppReturnMsgBean1;
						}
					}
					if(items.get(32) != null && items.get(32).trim().length() != 0) {
						tppReturnMsgBean1.setReturnMsg(sbMsg.toString());
						logger.error(sbMsg.toString());
						return tppReturnMsgBean1;
					}
				}
				//========================================================================================
				tppReturnMsgBean1.setTpp(tppService.saveTpp(tpp));
				tppReturnMsgBean1.setReturnFlag(1);
			}
			//}
		} else {
			tppReturnMsgBean1.setReturnMsg(AppConstants.errorCode03);
			logger.error(AppConstants.errorCode03);
		}

		if(tppReturnMsgBean1.getReturnFlag() == 2 && tppReturnMsgBean1.getReturnMsg().length() == 0) {
			tppReturnMsgBean1.setReturnMsg("Nothing to update.");
		}
		return tppReturnMsgBean1;

	}

	//Added by Arindam Sikdar for Dynamic Data Load process - Partner Load
	@Override
	public Partner getPartnerFromXlsxString(String partnerString) {
		Partner partner = null; 
		PartnerGroup partnerGroup = null;
		ContactDetail contactDetail = null;
		//Document doc = null;
		List<String> items = Arrays.asList(partnerString.split("\\s*,\\s*"));
		//logger.debug("Total column number in Partner sheet: " + items.size());
		if(items.size() == 17) {
			partner = new Partner();

			partner.setPartnerName(items.get(0));

			if(partnerGroupService.isPartnerGroupExists(items.get(1), items.get(2))) {
				partnerGroup = partnerGroupService.getPartnerGroupByGroupSubGroupName(items.get(1), items.get(2));
				partner.setPartnerGroup(partnerGroup);
				//contactDetail = seedDataService.getContactDetailFromCsvString(partnerString);
				contactDetail = seedDataService.getContactDetailFromCsvString(items.get(3)+","+items.get(4)+","+items.get(5)+","+items.get(6)+","+items.get(7)+","+items.get(8)+","+items.get(9)+","+items.get(10)+","+items.get(11)+","+items.get(12)+","+items.get(13)+","+items.get(14)+","+items.get(15)+","+items.get(16)+",");
				if(contactDetail.getContactName() == AppConstants.errorCode10) {
					//Raise error
					logger.error(AppConstants.errorCode10);
					partner.setPartnerName(AppConstants.errorCode10);
				} else {
					partner.addContact(contactDetail);
				}
			} else {
				//Raise error
				logger.error(AppConstants.errorCode01);
				partner.setPartnerName(AppConstants.errorCode01);
			}			


		}				


		return partner;
	}


	//Added by Arindam Sikdar for Dynamic Data Load process
	@Override
	public ContactDetail getContactDetailFromCsvString(String contactString) {
		ContactDetail contactDetail = null;
		Document doc = null;
		List<String> items = Arrays.asList(contactString.split("\\s*,\\s*"));
		//logger.debug("Total column number: " + items.size());
		if(items.size() == 14) {
			contactDetail = new ContactDetail();

			contactDetail.setContactName(items.get(0));
			contactDetail.setContactTitle(items.get(1));
			contactDetail.setBusinessPhoneCountry(items.get(2));
			contactDetail.setBusinessPhone(items.get(3));
			contactDetail.setBusinessPhoneExt(items.get(4));
			contactDetail.setMobilePhoneCountry(items.get(5));
			contactDetail.setMobilePhone(items.get(6));
			contactDetail.setMobilePhoneExt(items.get(7));
			contactDetail.setPersonalPhoneCountry(items.get(8));
			contactDetail.setPersonalPhone(items.get(9));
			contactDetail.setPersonalPhoneExt(items.get(10));
			contactDetail.setContactEmail(items.get(11));
			contactDetail.setContactEmail2(items.get(12));

			doc = masterDataService.findDocumentTypeByDocumentType(Integer.parseInt(items.get(13)));
			if(doc != null) {
				contactDetail.setTransactionType(doc);
				//logger.debug("DOC object is not null.");
			}else {
				contactDetail.setContactName(AppConstants.errorCode10);
				logger.error(AppConstants.errorCode10);
			}

		}


		return contactDetail;

	}

	@Override
	public PartnerGroup getPartnerGroupFromCsvString(String text) {
		PartnerGroup entity = null;
		List<String> items = Arrays.asList(text.split("\\s*,\\s*"));
		if (items.size() == 2) {
			entity = new PartnerGroup();
			entity.setGroupName(items.get(0));
			entity.setSubGroupName(items.get(1));
		}
		return entity;
	}

	@Override
	public ServiceType getServiceTypeFromCsvString(String text) {
		ServiceType entity = null;
		List<String> items = Arrays.asList(text.split("\\s*,\\s*"));
		if (items.size() == 7) {
			entity = new ServiceType();
			try 
			{

				ServiceCategory serviceCategory = serviceSubscriptionService.findServiceCategoryByNameIgnoreCase(items.get(2));

				if (serviceCategory==null)
				{
					throw new Exception ("Service Category with Name of " + items.get(2) + " not found.");
				}


				String directionName = items.get(4);
				Integer documentType = new Integer(items.get(5));
				Integer versionNumber = new Integer(items.get(6));
				String companyName  = items.get(0);
				String clientType = items.get(1);

				Document document = masterDataService.findDocumentTypeByDocumentType(documentType);

				if (document==null)
				{
					throw new Exception ("Document of Type " + documentType + " not found.");
				}

				Direction direction = masterDataService.findDirectionByName(directionName);

				if (direction==null)
				{
					throw new Exception ("Direction " + directionName + " not found.");
				}

				Version version = masterDataService.findVersionByVersionNumber(versionNumber);

				if (version==null)
				{
					throw new Exception ("Version " + versionNumber + " not found.");
				}

				if (companyName.equalsIgnoreCase("ABSG"))
				{
					entity.setCompany(CompanyEnum.ABSG);
				}
				else
				{
					entity.setCompany(CompanyEnum.ABSG);
				}

				if (clientType.equalsIgnoreCase("Supplier"))
				{
					entity.setPartnerCategory(PartnerCategoryEnum.Supplier);
				}
				else
				{
					entity.setPartnerCategory(PartnerCategoryEnum.Customer);
				}
				entity.setBusinessServiceName(items.get(3));
				entity.setDirection(direction);
				entity.setDocument(document);
				entity.setServiceCategory(serviceCategory);

			}
			catch (NumberFormatException ex)
			{
				logger.error("Numbers are expected for Service Category ID, Document and Version : " + text);
			}
			catch (Exception ex)
			{
				logger.error(ex.getMessage());
			}

		}
		return entity;
	}

	private boolean loadPartnerGroup(String text)
	{
		boolean isNew = false;

		PartnerGroup entity = seedDataService.getPartnerGroupFromCsvString(text);
		if(!partnerGroupService.isPartnerGroupExists(entity.getGroupName(), entity.getSubGroupName()))
		{
			partnerGroupService.savePartnerGroup(entity);
			isNew=true;
		}

		return isNew;
	}

	private boolean loadServiceType(String text)
	{
		boolean isNew = true;

		ServiceType entity = seedDataService.getServiceTypeFromCsvString(text);
		serviceSubscriptionService.saveServiceType(entity);
		return isNew;
	}

	private boolean loadServiceCategoryLightWellPartner(String text)
	{
		boolean isNew = true;

		LightWellPartner lwPartner = seedDataService.getLightWellPartnerFromCsvString(text);
		String serviceCategoryName = text.substring(0,text.indexOf(","));
		ServiceCategory serviceCategory = serviceSubscriptionService.findServiceCategoryByNameIgnoreCase(serviceCategoryName.trim());

		if (serviceCategory==null)
		{
			serviceCategory = new ServiceCategory();
			serviceCategory.setName(serviceCategoryName);
		}

		serviceCategory.addLightWellPartner(lwPartner);
		serviceSubscriptionService.saveServiceCategory(serviceCategory);			


		return isNew;
	}

	@Override
	public LightWellPartner getLightWellPartnerFromCsvString(String text) {
		LightWellPartner lightWellPartner = null;
		List<String> items = Arrays.asList(text.split("\\s*,\\s*"));
		if (items.size() == 10) {
			lightWellPartner = new LightWellPartner();
			lightWellPartner.setTestIsaID(items.get(1));
			lightWellPartner.setTestIsaQualifier(items.get(2));
			lightWellPartner.setTestGsId(items.get(3));
			lightWellPartner.setProductionIsaID(items.get(4));
			lightWellPartner.setProductionIsaQualifier(items.get(5));
			lightWellPartner.setProductionGsId(items.get(6));
			lightWellPartner.setOrganizationName(items.get(7));
			lightWellPartner.setActive(true);
			lightWellPartner.setNotes(items.get(9));

		}
		return lightWellPartner;
	}

	@Override
	public TpiMap getMapFromCsvString(String text) {

		TpiMap result = null;


		List<String> items = Arrays.asList(text.split("\\s*,\\s*"));

		try
		{


			if (items.size() == 2 || items.size() == 1)
			{
				result = new TpiMap();
				String mapName = items.get(0);
				result.setMapName(mapName);

				if (items.size()==2)
				{
					result.setMapDescription(items.get(1));
				}

			}
		}
		catch (Exception ex)
		{
			logger.error(ex.getMessage());
		}
		return result;
	}

	@Override
	public ServiceType loadMapsForServiceCategory(String text) {
		List<String> items = Arrays.asList(text.split("\\s*,\\s*"));

		ServiceType result = null;

		try
		{
			if (items.size() == 2)
			{
				ServiceType serviceType = masterDataService.findServiceTypeByName(items.get(0));
				String mapName = items.get(1);

				if (serviceType!=null)
				{					
					TpiMap existingMap = masterDataService.findMapByName(mapName);
					if (existingMap!=null)
					{
						serviceType.addMap(existingMap);
						result = serviceType;
						serviceTypeRepository.save(serviceType);
					}
				}

			}
		}
		catch (Exception ex)
		{
			logger.error(ex.getMessage());
		}
		return result;
	}

	@Override
	public SdBusinessUnit getSdBusinessUnitFromString(String text) {
		SdBusinessUnit sdBusinessUnit = null;
		List<String> items = Arrays.asList(text.split("\\s*,\\s*"));
		if (items.size() == 2)
		{
			sdBusinessUnit = new SdBusinessUnit();
			sdBusinessUnit.setName(items.get(0));
			SdBusinessSubUnit subUnit = new SdBusinessSubUnit();
			subUnit.setSubUnitName(items.get(1));
			sdBusinessUnit.addSubUnit(subUnit);

		}
		return sdBusinessUnit;
	}

	@Override
	public SdServiceType getSdServiceTypeFromString(String text) {
		SdServiceType sdServiceType = null;
		List<String> items = Arrays.asList(text.split("\\s*,\\s*"));
		if (items.size() == 1) 
		{
			sdServiceType = new SdServiceType();
			sdServiceType.setName(items.get(0));
		}
		else if (items.size() == 2)
		{
			sdServiceType = new SdServiceType();
			sdServiceType.setName(items.get(0));
			sdServiceType.setDescription(items.get(0));
		}
		return sdServiceType;
	}

	protected boolean loadSdServiceTypeFromString(String text)
	{
		boolean result = false;
		SdServiceType sdServiceType = this.getSdServiceTypeFromString(text);
		if (sdServiceType!=null)
		{
			SdServiceType existing = sdMasterDataService.findServiceTypeByName(sdServiceType.getName());

			if (existing==null)
			{
				sdMasterDataService.saveServiceType(sdServiceType);
				result = true;
			}
			else
			{
				existing.setDescription(sdServiceType.getDescription());
				sdMasterDataService.saveServiceType(existing);
				result = false;
			}
		}
		return result;
	}

	@Transactional
	protected boolean loadSdBusinessUntiFromString(String text)
	{
		boolean result = false;
		SdBusinessUnit sdBusinessUnit = getSdBusinessUnitFromString(text);

		if (sdBusinessUnit!=null)
		{
			SdBusinessUnit existing = sdMasterDataService.findSdBusinessUnitByName(sdBusinessUnit.getName());

			if (existing==null)
			{
				sdMasterDataService.saveSdBusinessUnit(sdBusinessUnit);
				result = true;
			}
			else
			{
				boolean found = false;
				for (SdBusinessSubUnit bs: existing.getSubUnits())
				{
					if (bs.getSubUnitName().equalsIgnoreCase(sdBusinessUnit.getSubUnits().iterator().next().getSubUnitName()))
					{
						found = true;
						break;
					}
				}

				if (!found)
				{
					existing.addSubUnit(sdBusinessUnit.getSubUnits().iterator().next());
					sdMasterDataService.saveSdBusinessUnit(existing);
					result = false;
				}
			}

		}

		return result;
	}
	@Transactional
	protected boolean loadServiceCategoryDefFromText(String line) throws TpiValidationException
	{
		boolean result = false;

		List<String> items = Arrays.asList(line.split("\\s*,\\s*"));

		this.validateSdBusinessServiceCategoryInput(items);

		String serviceKey = items.get(0).trim();
		String serviceCategory = items.get(1).trim();
		String categoryId = items.get(2).trim();
		String serviceLevel = items.get(3).trim();
		String serviceLevelId = items.get(4).trim();
		String businessUnit = items.get(5).trim();
		String businessSubUnit = items.get(6).trim();
		String servicePreamble = items.get(7).trim();
		String transactionType = items.get(8).trim();
		String direction = items.get(9).trim();
		String serviceType = items.get(10).trim();
		String interCo = items.get(11).trim();
		String serviceDescription = items.get(12).trim();
		int transactionCode = 0;

		SdBusinessService businessService = null;

		businessService = sdServiceCategoryService.findBusinessServiceByServiceKey(serviceKey, SdBusinessService.class);

		if (businessService==null)
		{
			businessService = new SdBusinessService();
			businessService.setServiceKey(serviceKey);
		}

		//Transaction
		if (transactionType.equalsIgnoreCase("All"))
		{
			transactionCode=0;
		}
		else
		{
			try 
			{
				transactionCode = Integer.parseInt(transactionType);
			}
			catch (NumberFormatException ex)
			{
				throw new TpiValidationException(transactionType + " is not a valid transaction code. Numeric or 'All' value is expected");
			}
		}

		Document doc = masterDataService.findDocumentTypeByDocumentType(transactionCode);	

		if (doc!=null)
		{
			businessService.setDocument(doc);
		}
		else
		{
			throw new TpiValidationException("Transaction " + transactionType + " not found. Add new Transaction code before retrying again");
		}

		if (direction.equalsIgnoreCase("I"))
		{
			direction = "INBOUND";
		}
		else if(direction.equalsIgnoreCase("O"))
		{
			direction = "OUTBOUND";
		}

		Direction directionType = masterDataService.findDirectionByName(direction);

		if (directionType==null)
		{
			throw new TpiValidationException("Direction " + direction + " not found. Add new Direction code before retrying again");
		}

		businessService.setDirection(directionType);
		businessService.setInterCoSendToBU(interCo);
		businessService.setServiceLevel(serviceLevel);
		businessService.setServiceLevelId(serviceLevelId);
		businessService.setServicePreamble(servicePreamble);
		businessService.setServiceDescription(serviceDescription);


		SdServiceCategoryDef serviceCategoryDef = null;		

		serviceCategoryDef = sdServiceCategoryService.findSdServiceCategoryByName(serviceCategory, SdServiceCategoryDef.class);

		if (serviceCategoryDef==null)
		{
			serviceCategoryDef = new SdServiceCategoryDef();
			ServiceCategory sc = serviceSubscriptionService.findServiceCategoryByNameIgnoreCase(serviceCategory);
			serviceCategoryDef.setCategoryID(categoryId);

			if (sc==null)
			{
				sc = new ServiceCategory();
				sc.setName(serviceCategory);
				sc = serviceSubscriptionService.saveServiceCategory(sc);				
			}

			serviceCategoryDef.setServiceCategory(sc);

			SdBusinessUnit bu = sdMasterDataService.findSdBusinessUnitByName(businessUnit);

			if (bu==null)
			{
				bu = new SdBusinessUnit();
				bu.setName(businessUnit);
				SdBusinessSubUnit bsu = new SdBusinessSubUnit();
				bsu.setSubUnitName(businessSubUnit);
				bu.addSubUnit(bsu);
				bu = sdMasterDataService.saveSdBusinessUnit(bu);
				serviceCategoryDef.setBusinessUnit(bu);
				serviceCategoryDef.setBusinessSubUnit(bsu);
			}
			else
			{
				if (bu.getSubUnits()!=null)
				{
					for (SdBusinessSubUnit bsu: bu.getSubUnits())
						if (bsu.getSubUnitName().equalsIgnoreCase(businessSubUnit))
						{	
							serviceCategoryDef.setBusinessSubUnit(bsu);
							break;
						}
					if (serviceCategoryDef.getBusinessSubUnit()==null)
					{
						SdBusinessSubUnit bsu = new SdBusinessSubUnit();
						bsu.setSubUnitName(businessSubUnit);
						bu.addSubUnit(bsu);
						bu = sdMasterDataService.saveSdBusinessUnit(bu);
						serviceCategoryDef.setBusinessUnit(bu);
						for (SdBusinessSubUnit newBsu: bu.getSubUnits())
						{
							if (newBsu.getSubUnitName().equalsIgnoreCase(businessSubUnit))
							{
								serviceCategoryDef.setBusinessSubUnit(newBsu);
								break;
							}
						}

					}
					else
					{
						serviceCategoryDef.setBusinessUnit(bu);
					}
				}

			}
			serviceCategoryDef.setPartnerSubscription(SdYesNo.Y);
			sdServiceCategoryService.saveSdServiceCategoryDef(serviceCategoryDef);
		}

		businessService.setServiceCategory(serviceCategoryDef);

		SdServiceType serviceTypeEntity = sdMasterDataService.findServiceTypeByName(serviceType);
		if (serviceTypeEntity==null)
		{
			serviceTypeEntity = new SdServiceType();
			serviceTypeEntity.setName(serviceType);
			serviceTypeEntity.setDescription(serviceType);
			sdMasterDataService.saveServiceType(serviceTypeEntity);
		}

		businessService.setServiceType(serviceTypeEntity);
		sdServiceCategoryService.saveSdBusinessService(businessService);

		
		//save ServiceType
		ServiceType tpiServiceType = null;
		tpiServiceType = serviceTypeRepository.findServiceTypeByBusinessServiceNameIgnoreCase(serviceDescription);
		
		if (tpiServiceType==null)
		{
			tpiServiceType = new ServiceType();
			tpiServiceType.setBusinessServiceName(serviceDescription);
		}
		
		tpiServiceType.setDirection(directionType);
		try
		{
		tpiServiceType.setCompany(Enum.valueOf(CompanyEnum.class, serviceLevel));
		}
		catch (IllegalArgumentException ex)
		{
			throw new TpiValidationException("Company " + serviceLevel + " is not valid");
		}
		tpiServiceType.setDocument(doc);
		tpiServiceType.setServiceCategory(serviceCategoryDef.getServiceCategory());
		
		serviceTypeRepository.save(tpiServiceType);
		
		return result;
	}

	private void validateSdBusinessServiceCategoryInput(List<String> values) throws TpiValidationException
	{
		if (values.size()!=13) 
		{
			throw new TpiValidationException("SdServiceCategory data file expects 13 values");
		}

		if (values.get(0)==null || values.get(0).isEmpty())
		{
			throw new TpiValidationException("SdServiceCategory: Service Key cannot be empty");
		}

		if (values.get(1)==null || values.get(1).isEmpty())
		{
			throw new TpiValidationException("SdServiceCategory: Service Category cannot be empty");
		}

		if (values.get(7)==null || values.get(7).isEmpty())
		{
			throw new TpiValidationException("SdServiceCategory: Service Preamble cannot be empty");
		}

		if (values.get(8)==null || values.get(8).isEmpty())
		{
			throw new TpiValidationException("SdServiceCategory: Transaction cannot be empty");
		}

		if (values.get(9)==null || values.get(9).isEmpty())
		{
			throw new TpiValidationException("SdServiceCategory: Direction cannot be empty");
		}

		if (values.get(10)==null || values.get(10).isEmpty())
		{
			throw new TpiValidationException("SdServiceCategory: Service Type cannot be empty");
		}

	}
}
